<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebView2.DevTools.Dom</name>
    </assembly>
    <members>
        <member name="T:WebView2.DevTools.Dom.AddTagOptions">
            <summary>
            Options used by <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddScriptTagAsync(WebView2.DevTools.Dom.AddTagOptions)"/> &amp; <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddStyleTagAsync(WebView2.DevTools.Dom.AddTagOptions)"/>.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.AddTagOptions.Url">
            <summary>
            Url of a script to be added.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.AddTagOptions.Path">
            <summary>
            Path to the JavaScript file to be injected into frame. If its a relative path, then it is resolved relative to <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.AddTagOptions.Content">
            <summary>
            Raw JavaScript content to be injected into frame.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.AddTagOptions.Type">
            <summary>
            Script type. Use <c>module</c> in order to load a Javascript ES6 module.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"/>
        </member>
        <member name="T:WebView2.DevTools.Dom.BoundingBox">
            <summary>
            Bounding box data returned by <see cref="M:WebView2.DevTools.Dom.HtmlElement.BoundingBoxAsync"/>.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoundingBox.X">
            <summary>
            The x coordinate of the element in pixels.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoundingBox.Y">
            <summary>
            The y coordinate of the element in pixels.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoundingBox.Width">
            <summary>
            The width of the element in pixels.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoundingBox.Height">
            <summary>
            The height of the element in pixels.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.BoundingBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.BoundingBox"/> class.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.BoundingBox"/> class.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.BoundingBox.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:WebView2.DevTools.Dom.BoundingBox.Equals(WebView2.DevTools.Dom.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:WebView2.DevTools.Dom.BoundingBox"/> is equal to the current <see cref="T:WebView2.DevTools.Dom.BoundingBox"/>.
            </summary>
            <param name="obj">The <see cref="T:WebView2.DevTools.Dom.BoundingBox"/> to compare with the current <see cref="T:WebView2.DevTools.Dom.BoundingBox"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:WebView2.DevTools.Dom.BoundingBox"/> is equal to the current
            <see cref="T:WebView2.DevTools.Dom.BoundingBox"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.BoundingBox.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:WebView2.DevTools.Dom.BoxModel">
            <summary>
            Represents boxes of the element.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModel.Content">
            <summary>
            Gets the Content box
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModel.Padding">
            <summary>
            Gets the Padding box
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModel.Border">
            <summary>
            Gets the Border box
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModel.Margin">
            <summary>
            Gets the Margin box
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModel.Width">
            <summary>
            Gets the element's width
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModel.Height">
            <summary>
            Gets the element's height
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.BoxModelPoint">
            <summary>
            Represents a <see cref="T:WebView2.DevTools.Dom.BoxModel"/> point
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModelPoint.X">
            <summary>
            Gets the X point
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.BoxModelPoint.Y">
            <summary>
            Gets the y point
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.CoreWebView2Extensions">
            <summary>
            CoreWebView2 extensions
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CoreWebView2Extensions.CreateDevToolsContextAsync(Microsoft.Web.WebView2.Core.CoreWebView2,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/> for the <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2"/> instance.
            </summary>
            <param name="coreWebView2">core webview</param>
            <param name="loggerFactory">logger factory</param>
            <returns>A task that can be awaited to create a new <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/> instance</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.Dialog">
             <summary>
             <see cref="T:WebView2.DevTools.Dom.Dialog"/> objects are dispatched by page via the 'dialog' event.
             </summary>
             <example>
             An example of using Dialog class:
            <code>
            <![CDATA[
             devToolsContext.Dialog += async (sender, e) =>
             {
                 await e.Dialog.Accept();
             }
             await devToolsContext.EvaluateExpressionAsync("alert('yo');");
             ]]>
             </code>
             </example>
        </member>
        <member name="P:WebView2.DevTools.Dom.Dialog.DialogType">
            <summary>
            Dialog's type, can be one of alert, beforeunload, confirm or prompt.
            </summary>
            <value>The type of the dialog.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Dialog.DefaultValue">
            <summary>
            If dialog is prompt, returns default prompt value. Otherwise, returns empty string.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Dialog.Message">
            <summary>
            A message displayed in the dialog.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.Dialog.#ctor(Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.DevToolsProtocolHelper,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.Dialog"/> class.
            </summary>
            <param name="client">Client.</param>
            <param name="type">Type.</param>
            <param name="message">Message.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Dialog.Accept(System.String)">
            <summary>
            Accept the Dialog.
            </summary>
            <returns>Task which resolves when the dialog has been accepted.</returns>
            <param name="promptText">A text to enter in prompt. Does not cause any effects if the dialog's type is not prompt.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Dialog.Dismiss">
            <summary>
            Dismiss the dialog.
            </summary>
            <returns>Task which resolves when the dialog has been dismissed.</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.DialogEventArgs">
            <summary>
            <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.Dialog"/> arguments.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.DialogEventArgs.Dialog">
            <summary>
            Dialog data.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.DialogEventArgs.#ctor(WebView2.DevTools.Dom.Dialog)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.DialogEventArgs"/> class.
            </summary>
            <param name="dialog">Dialog.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.AdjacentPosition">
            <summary>
            Enumeration with possible values for the adjacent position insertion.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.AdjacentPosition.BeforeBegin">
            <summary>
            Before the element itself.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.AdjacentPosition.AfterBegin">
            <summary>
            Just inside the element, before its first child.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.AdjacentPosition.BeforeEnd">
            <summary>
            Just inside the element, after its last child.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.AdjacentPosition.AfterEnd">
            <summary>
            After the element itself.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.AsyncDomExtensions">
            <summary>
            AsyncDomExtensions
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.AsyncDomExtensions.ToArrayAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.HtmlCollection{``0}})">
            <summary>
            ToArray
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="task">task</param>
            <returns>HtmlCollection elements as array</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.AsyncDomExtensions.ToArrayAsync(System.Threading.Tasks.Task{WebView2.DevTools.Dom.FileList})">
            <summary>
            ToArrayAsync simplifies getting an Array of Files
            </summary>
            <param name="task">task</param>
            <returns>FileList elements as array</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.AsyncDomExtensions.GetLengthAsync(System.Threading.Tasks.Task{WebView2.DevTools.Dom.FileList})">
            <summary>
            GetLengthAsync
            </summary>
            <param name="task">task</param>
            <returns>Length</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.AsyncDomExtensions.GetLengthAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.HtmlCollection{``0}})">
            <summary>
            GetLengthAsync
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="task">task</param>
            <returns>Length</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.AsyncDomExtensions.GetBodyAsync(System.Threading.Tasks.Task{WebView2.DevTools.Dom.HtmlTableElement})">
            <summary>
            Gets the first <see cref="T:WebView2.DevTools.Dom.HtmlTableElement"/> from the tBodies HTMLCollection
            for the given table.
            </summary>
            <param name="task">Task</param>
            <returns><see cref="T:WebView2.DevTools.Dom.HtmlTableSectionElement"/> or null</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.AsyncDomExtensions.AndThen``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Boolean)">
             <summary>
             A helper function for chaining Tasks together, useful for retrieving
             a DOM elment then obtaining a single property value.
             </summary>
             <typeparam name="TIn">RemoteHandle</typeparam>
             <typeparam name="TOut">Return Type</typeparam>
             <param name="inputTask">input task</param>
             <param name="func">func</param>
             <param name="dispose">if true (default) the <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> will be disposed after <paramref name="func"/> has been executed</param>
             <returns>Task</returns>
             <remarks>
             Disposing of the <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> only frees our DevTools reference, the object in DOM Element/Javascript Object remains unchanged.
             </remarks>
             <example>
             An chaining method calls together
            <code>
            <![CDATA[
             var type = await DevToolsContext.QuerySelectorAsync("body")
                 .AndThen(x => x.QuerySelectorAsync("#agree"))
                 .AndThen(x => x.GetAttributeAsync<string>("type"));
             ]]>
             </code>
             </example>
        </member>
        <member name="M:WebView2.DevTools.Dom.AsyncDomExtensions.AndThen``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task},System.Boolean)">
             <summary>
             A helper function for chaining Tasks together, useful for retrieving
             a DOM elment then obtaining a single property value.
             </summary>
             <typeparam name="TIn">RemoteHandle</typeparam>
             <param name="inputTask">input task</param>
             <param name="func">func</param>
             <param name="dispose">if true (default) the <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> will be disposed after <paramref name="func"/> has been executed</param>
             <returns>Task</returns>
             <remarks>
             Disposing of the <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> only frees our DevTools reference, the object in DOM Element/Javascript Object remains unchanged.
             </remarks>
             <example>
             An chaining method calls together
            <code>
            <![CDATA[
             var type = await DevToolsContext.QuerySelectorAsync("body")
                 .AndThen(x => x.QuerySelectorAsync("#agree"))
                 .AndThen(x => x.GetAttributeAsync<string>("type"));
             ]]>
             </code>
             </example>
        </member>
        <member name="T:WebView2.DevTools.Dom.CssStyleDeclaration">
            <summary>
            The CSSStyleDeclaration interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CssStyleDeclaration.SetPropertyAsync(System.String,System.Object,System.Boolean)">
            <summary>
            Returns a CSS property name by it's index.
            https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty
            </summary>
            <param name="propertyName">CSS property name (hyphen case) to be modified.</param>
            <param name="value">optional value</param>
            <param name="important">optional important</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.CssStyleDeclaration.GetPropertyValueAsync(System.String)">
            <summary>
            returns the value of a specified CSS property as a string
            </summary>
            <param name="propertyName">property to get</param>
            <returns>Task</returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException">Thrown if no matching property is found</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.CssStyleDeclaration.GetPropertyValueAsync``1(System.String)">
            <summary>
            returns the value of a specified CSS property.
            </summary>
            <typeparam name="T">Property Value Type e.g. string, int</typeparam>
            <param name="propertyName">property to get</param>
            <returns>Task of <typeparamref name="T"/></returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException">Thrown if no matching property is found</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.CssStyleDeclaration.ItemAsync(System.Int32)">
            <summary>
            Returns a CSS property name by it's index.
            https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/item
            </summary>
            <param name="index">index</param>
            <returns>A Task that evaluates to property name.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.CssStyleDeclaration.RemovePropertyAsync(System.String)">
            <summary>
            Removes a property from a CSS style declaration object.
            https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/removeProperty
            </summary>
            <param name="propertyName">CSS property name (hyphen case) to be removed.</param>
            <returns>A Task that evaluates to the value of the CSS property before it was removed.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.CssStyleDeclaration.GetPropertyPriorityAsync(System.String)">
            <summary>
            Returns all explicitly set priorities on the CSS property.
            https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyPriority
            </summary>
            <param name="propertyName">CSS property name (hyphen case) to be checked.</param>
            <returns>A Task that evaluates the priority (e.g. "important") if one exists returns true. If none exists, returns false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.CssStyleDeclaration.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WebView2.DevTools.Dom.DocumentPositions">
            <summary>
            Enumeration of possible document position values.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.DocumentPositions.Same">
            <summary>
            It is the same node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.DocumentPositions.Disconnected">
            <summary>
            There is no relation.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.DocumentPositions.Preceding">
            <summary>
            The node preceeds the other element.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.DocumentPositions.Following">
            <summary>
            The node follows the other element.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.DocumentPositions.Contains">
            <summary>
            The node contains the other element.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.DocumentPositions.ContainedBy">
            <summary>
            The node is contained in the other element.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.DocumentPositions.ImplementationSpecific">
            <summary>
            The relation is implementation specific.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.EventTarget">
            <summary>
            The EventTarget interface is implemented by objects that can receive events and may have listeners for them.
            In other words, any target of events implements the three methods associated with this interface.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.EventTarget.AddEventListenerAsync(System.String,System.String)">
            <summary>
            AddEventListenerAsync
            </summary>
            <param name="eventType">A case-sensitive string representing the event type to listen for.</param>
            <param name="functionName">name of the function that was created using <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync(System.String,System.Action)"/></param>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.File">
            <summary>
            The File interface provides information about files and allows JavaScript in a web page to access their content.
            </summary>
            https://developer.mozilla.org/en-US/docs/Web/API/File
        </member>
        <member name="M:WebView2.DevTools.Dom.File.GetNameAsync">
            <summary>
            Returns the name of the file referenced by the File object.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.File.GetTypeAsync">
            <summary>
            Returns the MIME type of the file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.File.GetSizeAsync">
            <summary>
            Returns the size of the file in bytes.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.File.TextAsync">
            <summary>
            Transforms the File into a stream and reads it to completion. It returns a promise that resolves with a USVString (text).
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.FileList">
            <summary>
            The HTMLCollection interface represents a generic collection (array-like object similar to arguments)
            of elements (in document order) and offers methods and properties for selecting from the list.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.FileList.GetLengthAsync">
            <summary>
            Returns the number of items in the collection.
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.FileList.ItemAsync(System.Int32)">
            <summary>
            Returns a File object representing the file at the specified index in the file list.
            https://developer.mozilla.org/en-US/docs/Web/API/FileList#item
            </summary>
            <param name="index">The position of the Node to be returned. Elements appear in an HTMLCollection in the same order in which they appear in the document's source.</param>
            <returns>
            A Task that evaluates to the Node at the specified index,
            or null if index is less than zero or greater than or equal to the length property.
            </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.FileList.ToArrayAsync">
            <summary>
            To Array
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlAnchorElement">
            <summary>
            The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods
            (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the
            layout and presentation of such elements. This interface corresponds to a element; not to be confused with link, which is represented by HTMLLinkElement)
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement" />
             <summary>
             Represents the a HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetTypeAsync(System.String)">
            <summary>
            Sets string representing the MIME type of the linked resource.
            </summary>
            <param name="type">string</param>
            <returns>A Task that when awaited sets the type property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetTextAsync(System.String)">
            <summary>
            Sets the text content of the element.
            </summary>
            <param name="text">string</param>
            <returns>A Task that when awaited sets the text property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetTargetAsync">
             <summary>
             Gets the name of the target frame to which the resource applies.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetTargetAsync(System.String)">
             <summary>
             Sets the name of the target frame to which the resource applies.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetDownloadAsync">
             <summary>
             Gets the linked resource is intended to be downloaded rather than displayed.
             The value represent the proposed name of the file. If the name is not a valid filename of the
             underlying OS, the navigator will adapt it.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetDownloadAsync(System.String)">
             <summary>
             Sets the linked resource is intended to be downloaded rather than displayed.
             The value represent the proposed name of the file. If the name is not a valid filename of the
             underlying OS, the navigator will adapt it.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetPingAsync">
             <summary>
             Gets the element's ping attribute as a settable list of tokens.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetRelationAsync">
             <summary>
             Gets the rel HTML attribute, specifying the relationship
             of the target object to the link object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetRelAsync(System.String)">
             <summary>
             Sets the rel HTML attribute, specifying the relationship
             of the target object to the link object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetRelationListAsync">
             <summary>
             Gets the rel HTML attribute, as a list of tokens.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetTargetLanguageAsync">
             <summary>
             Gets the language code for the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetHreflangAsync(System.String)">
             <summary>
             Sets the language code for the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetTypeAsync">
             <summary>
             Gets the type of the resource. If present, the attribute must be a valid MIME type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetTextAsync">
             <summary>
             Gets the text of the anchor tag (same as TextContent).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetHrefAsync">
             <summary>
             Gets the whole URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetHrefAsync(System.String)">
             <summary>
             Sets the whole URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetProtocolAsync">
             <summary>
             Gets the protocol scheme of the URL, including the final
             ':'.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetProtocolAsync(System.String)">
             <summary>
             Sets the protocol scheme of the URL, including the final
             ':'.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetHostAsync">
             <summary>
             Gets the host, that is the hostname, a ':', and the port of
             the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetHostAsync(System.String)">
             <summary>
             Sets the host, that is the hostname, a ':', and the port of
             the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetHostNameAsync">
             <summary>
             Gets the domain of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetHostnameAsync(System.String)">
             <summary>
             Sets the domain of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetPortAsync">
             <summary>
             Gets the port number of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetPortAsync(System.String)">
             <summary>
             Sets the port number of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetPathNameAsync">
             <summary>
             Gets an initial '/' followed by the path of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetPathnameAsync(System.String)">
             <summary>
             Sets an initial '/' followed by the path of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetSearchAsync">
             <summary>
             Gets a '?' followed by the parameters of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetSearchAsync(System.String)">
             <summary>
             Sets a '?' followed by the parameters of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetHashAsync">
             <summary>
             Gets a '#' followed by the fragment identifier of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetHashAsync(System.String)">
             <summary>
             Sets a '#' followed by the fragment identifier of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetUserNameAsync">
             <summary>
             Gets the username specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetUsernameAsync(System.String)">
             <summary>
             Sets the username specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetPasswordAsync">
             <summary>
             Gets the password specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.SetPasswordAsync(System.String)">
             <summary>
             Sets the password specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAnchorElement.GetOriginAsync">
             <summary>
             Gets the canonical form of the origin of the specific location.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlButtonElement">
            <summary>
            The HTMLButtonElement interface provides properties and methods
            (beyond the regular HTMLElement interface it also has available to it by inheritance)
            for manipulating button elements.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement" />
             <summary>
             Represents the button HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetAutofocusAsync">
             <summary>
             Gets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetAutofocusAsync(System.Boolean)">
             <summary>
             Sets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetDisabledAsync">
             <summary>
             Gets if the button is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the button is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetNameAsync">
             <summary>
             Gets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetTypeAsync">
             <summary>
             Gets the type of button.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetTypeAsync(WebView2.DevTools.Dom.HtmlButtonElementType)">
             <summary>
             Sets the type of button.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetValueAsync">
             <summary>
             Gets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetValueAsync(System.String)">
             <summary>
             Sets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetFormActionAsync">
             <summary>
             Gets the URI of a resource that processes information submitted by the button.
             If specified, this attribute overrides the action attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetFormActionAsync(System.String)">
             <summary>
             Sets the URI of a resource that processes information submitted by the button.
             If specified, this attribute overrides the action attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetFormEncTypeAsync">
             <summary>
             Gets the type of content that is used to submit the form to the server. If specified, this
             attribute overrides the enctype attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetFormEncTypeAsync(System.String)">
             <summary>
             Sets the type of content that is used to submit the form to the server. If specified, this
             attribute overrides the enctype attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetFormMethodAsync">
             <summary>
             Gets the HTTP method that the browser uses to submit the form. If specified, this attribute
             overrides the method attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetFormMethodAsync(System.String)">
             <summary>
             Sets the HTTP method that the browser uses to submit the form. If specified, this attribute
             overrides the method attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetFormNoValidateAsync">
             <summary>
             Gets that the form is not to be validated when it is submitted. If specified, this attribute
             overrides the enctype attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetFormNoValidateAsync(System.Boolean)">
             <summary>
             Sets that the form is not to be validated when it is submitted. If specified, this attribute
             overrides the enctype attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetFormTargetAsync">
             <summary>
             Gets A name or keyword indicating where to display the response that is received after submitting
             the form. If specified, this attribute overrides the target attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.SetFormTargetAsync(System.String)">
             <summary>
             Sets A name or keyword indicating where to display the response that is received after submitting
             the form. If specified, this attribute overrides the target attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlButtonElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlButtonElementType">
            <summary>
            HtmlButtonElement Type
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlButtonElementType.Submit">
            <summary>
            The button submits the form. This is the default value if the attribute is not specified, or if it is dynamically changed to an empty or invalid value.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlButtonElementType.Reset">
            <summary>
            The button resets the form.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlButtonElementType.Button">
            <summary>
            The button does nothing.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlButtonElementType.Menu">
            <summary>
            The button displays a menu.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlCollection`1">
            <summary>
            The HTMLCollection interface represents a generic collection (array-like object similar to arguments)
            of elements (in document order) and offers methods and properties for selecting from the list.
            </summary>
            <typeparam name="T">Type derived from <see cref="T:WebView2.DevTools.Dom.Element"/></typeparam>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCollection`1.GetLengthAsync">
            <summary>
            Returns the number of items in the collection.
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCollection`1.ItemAsync(System.Int32)">
            <summary>
            Returns the specific node at the given zero-based index into the list. Returns null if the index is out of range.
            https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item
            </summary>
            <param name="index">The position of the Node to be returned. Elements appear in an HTMLCollection in the same order in which they appear in the document's source.</param>
            <returns>
            A Task that evaluates to the Node at the specified index,
            or null if index is less than zero or greater than or equal to the length property.
            </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCollection`1.NamedItemAsync(System.String)">
            <summary>
            The namedItem() method of the HTMLCollection interface returns the first Element
            in the collection whose id or name attribute match the specified name, or null if no element matches.
            </summary>
            <param name="key">is a string representing the value of the id or name attribute of the element we are looking for.</param>
            <returns>A Task that when awaited is the first Element in the HTMLCollection matching the key, or null, if there are none.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCollection`1.ToArrayAsync">
            <summary>
            To Array
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlDivElement">
            <summary>
            The HTMLDivElement interface provides special properties
            (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement" />
             <summary>
             Represents the div HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDivElement.GetAlignAsync">
            <summary>
            Gets the align property
            </summary>
            <returns><see cref="T:WebView2.DevTools.Dom.HtmlElementAlignType"/></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDivElement.SetAlignAsync(WebView2.DevTools.Dom.HtmlElementAlignType)">
            <summary>
            Sets the align property
            </summary>
            <param name="align">align</param>
            <returns>A Task that when awaited sets the align property</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlElement">
            <summary>
            Inherits from <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/>. It represents an in-page DOM element.
            ElementHandles can be created by <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAsync(System.String)"/> or <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllAsync(System.String)"/>.
            </summary>
             <summary>
             The HTMLElement interface represents any HTML element. Some elements directly
             implement this interface, other implement it via an interface that inherit it.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.UploadFileAsync(System.String[])">
            <summary>
            Uploads files
            </summary>
            <param name="filePaths">Sets the value of the file input to these paths. Paths are resolved using <see cref="M:System.IO.Path.GetFullPath(System.String)"/></param>
            <remarks>This method expects <c>elementHandle</c> to point to an <c>input element</c> <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/> </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.FocusAsync(System.Boolean)">
            <summary>
            Calls <c>focus</c> <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus"/> on the element.
            </summary>
            <param name="preventScroll">
            A Boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element
            into view. A value of false for preventScroll (the default) means that the browser will scroll the element into view
            after focusing it. If preventScroll is set to true, no scrolling will occur.
            </param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.TypeAsync(System.String,WebView2.DevTools.Dom.Input.TypeOptions)">
            <summary>
            Focuses the element, and sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="text">A text to type into a focused element</param>
            <param name="options">type options</param>
            <remarks>
            To press a special key, like <c>Control</c> or <c>ArrowDown</c> use <see cref="M:WebView2.DevTools.Dom.HtmlElement.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)"/>
            </remarks>
            <example>
            <code>
            <![CDATA[
            elementHandle.TypeAsync("#mytextarea", "Hello"); // Types instantly
            elementHandle.TypeAsync("#mytextarea", "World", new TypeOptions { Delay = 100 }); // Types slower, like a user
            ]]>
            </code>
            An example of typing into a text field and then submitting the form:
            <code>
            <![CDATA[
            var elementHandle = await devtoolsContext.QuerySelectorAsync("input");
            await elementHandle.TypeAsync("some text");
            await elementHandle.PressAsync("Enter");
            ]]>
            </code>
            </example>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.TapAsync">
            <summary>
            Scrolls element into view if needed, and then uses <see cref="M:WebView2.DevTools.Dom.Input.Touchscreen.TapAsync(System.Double,System.Double)"/> to tap in the center of the element.
            </summary>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException">if the element is detached from DOM</exception>
            <returns>Task which resolves when the element is successfully tapped</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)">
            <summary>
            Focuses the element, and then uses <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.DownAsync(System.String,WebView2.DevTools.Dom.Input.DownOptions)"/> and <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.UpAsync(System.String)"/>.
            </summary>
            <param name="key">Name of key to press, such as <c>ArrowLeft</c>. See <see cref="T:WebView2.DevTools.Dom.Input.KeyDefinitions"/> for a list of all key names.</param>
            <param name="options">press options</param>
            <remarks>
            If <c>key</c> is a single character and no modifier keys besides <c>Shift</c> are being held down, a <c>keypress</c>/<c>input</c> event will also be generated. The <see cref="P:WebView2.DevTools.Dom.Input.DownOptions.Text"/> option can be specified to force an input event to be generated.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.HoverAsync">
            <summary>
            Scrolls element into view if needed, and then uses <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Mouse"/> to hover over the center of the element.
            </summary>
            <returns>Task which resolves when the element is successfully hovered</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.ClickAsync(WebView2.DevTools.Dom.Input.ClickOptions)">
            <summary>
            Scrolls element into view if needed, and then uses <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Mouse"/> to click in the center of the element.
            </summary>
            <param name="options">click options</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException">if the element is detached from DOM</exception>
            <returns>Task which resolves when the element is successfully clicked</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.UploadFileAsync(System.Boolean,System.String[])">
            <summary>
            Uploads files
            </summary>
            <param name="resolveFilePaths">Set to true to resolve paths using <see cref="M:System.IO.Path.GetFullPath(System.String)"/></param>
            <param name="filePaths">Sets the value of the file input to these paths. Paths are resolved using <see cref="M:System.IO.Path.GetFullPath(System.String)"/></param>
            <remarks>This method expects <c>elementHandle</c> to point to an <c>input element</c> <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"/> </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.InvokeMemberAsync(System.String)">
            <summary>
            Invokes a member function (method).
            </summary>
            <param name="memberFunctionName">case sensitive member function name</param>
            <returns>Task which resolves when member (method).</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.XPathAsync(System.String)">
            <summary>
            Evaluates the XPath expression relative to the elementHandle. If there's no such element, the method will resolve to <c>null</c>.
            </summary>
            <param name="expression">Expression to evaluate <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate"/></param>
            <returns>Task which resolves to an array of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.BoundingBoxAsync">
            <summary>
            This method returns the bounding box of the element (relative to the main frame),
            or null if the element is not visible.
            </summary>
            <returns>The BoundingBox task.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.BoxModelAsync">
            <summary>
            returns boxes of the element, or <c>null</c> if the element is not visible. Box points are sorted clock-wise.
            </summary>
            <returns>Task BoxModel task.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.ContentFrameAsync">
            <summary>
            Content frame for element handles referencing iframe nodes, or null otherwise.
            </summary>
            <returns>Resolves to the content frame</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.IsIntersectingViewportAsync">
            <summary>
            Evaluates if the element is visible in the current viewport.
            </summary>
            <returns>A task which resolves to true if the element is visible in the current viewport.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetPropertyValueAsync(System.String,System.Object)">
            <summary>
            Set DOM Element Property. e.g innerText
            </summary>
            <param name="propertyName">property name</param>
            <param name="val">value</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetOuterTextAsync">
            <summary>
            The outerText property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            </summary>
            <returns>The rendered text content of a node and its descendants.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetInnerTextAsync">
            <summary>
            The innerText property of the HTMLElement interface represents the rendered text content of a node and its descendants.
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            </summary>
            <returns>The rendered text content of a node and its descendants.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetInnerTextAsync(System.String)">
            <summary>
            Sets the innerText property of the HTMLElement.
            As a setter this will replace the element's children with the given value, converting any line breaks into br elements.
            </summary>
            <param name="innerText">inner Text</param>
            <returns>A Task that when awaited sets the innerText</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetOuterTextAsync(System.String)">
            <summary>
            Sets the outerText property of the HTMLElement.
            Replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </summary>
            <param name="outerText">outer Text</param>
            <returns>A Task that when awaited sets the innerText</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetStyleAsync">
            <summary>
            returns the inline style of the element in the form of a <see cref="T:WebView2.DevTools.Dom.CssStyleDeclaration"/>
            object that contains a list of all styles properties for that element with values assigned
            for the attributes that are defined in the element's inline style attribute.
            </summary>
            <returns>A Task when awaited returns the inline style of the element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.AppendChildAsync(WebView2.DevTools.Dom.HtmlElement)">
            <summary>
            Adds a node to the end of the list of children
            </summary>
            <param name="htmlElement">html element</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.RemoveChildAsync(WebView2.DevTools.Dom.HtmlElement)">
            <summary>
            Removes a child node from the DOM and returns the removed node.
            </summary>
            <param name="aChild">A Node that is the child node to be removed from the DOM.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.InsertBeforeAsync(WebView2.DevTools.Dom.HtmlElement,WebView2.DevTools.Dom.HtmlElement)">
            <summary>
            Inserts a node before a reference node as a child
            </summary>
            <param name="newNode">The node to be inserted.</param>
            <param name="referenceNode">The node before which newNode is inserted. If this is null, then newNode is inserted at the end of node's child nodes.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.ReplaceChildAsync(WebView2.DevTools.Dom.HtmlElement,WebView2.DevTools.Dom.HtmlElement)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <param name="newNode">The new node to replace oldChild</param>
            <param name="oldChild">The child to be replaced.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.ScrollIntoViewIfNeededAsync(Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.DOM.Rect)">
            <summary>
            Scrolls the specified rect of the given node into view if not already visible.
            </summary>
            <param name="rect">
            The rect to be scrolled into view, relative to the node's border box, in CSS pixels. When omitted,
            center of the node will be used, similar to Element.scrollIntoView.
            </param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.InvokeClickAsync">
             <summary>
             Simulates a mouse click on an element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.FocusAsync">
             <summary>
             Puts the keyboard focus on the given element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.BlurAsync">
             <summary>
             Removes the keyboard focus on the given element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.ForceSpellCheckAsync">
             <summary>
             Forces the invocation of a spell check on the content.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetLanguageAsync">
             <summary>
             Gets the value of the lang attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetLangAsync(System.String)">
             <summary>
             Sets the value of the lang attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetTitleAsync">
             <summary>
             Gets the value of the title attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetTitleAsync(System.String)">
             <summary>
             Sets the value of the title attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetDirectionAsync">
             <summary>
             Gets the value of the dir attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetDirAsync(System.String)">
             <summary>
             Sets the value of the dir attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetDatasetAsync">
             <summary>
             Gets access to all the custom data attributes (data-*) set on the element. It is a map of DOMString,
             one entry for each custom data attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetIsTranslatedAsync">
             <summary>
             Gets if the element should be translated.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetTranslateAsync(System.Boolean)">
             <summary>
             Sets if the element should be translated.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetTabIndexAsync">
             <summary>
             Gets the position of the element in the tabbing order.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetTabIndexAsync(System.Int32)">
             <summary>
             Sets the position of the element in the tabbing order.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetIsSpellCheckedAsync">
             <summary>
             Gets if spell-checking is activated.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetSpellcheckAsync(System.Boolean)">
             <summary>
             Sets if spell-checking is activated.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetContentEditableAsync">
             <summary>
             Gets whether or not the element is editable. This enumerated
             attribute can have the values true, false and inherited.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetContentEditableAsync(System.String)">
             <summary>
             Sets whether or not the element is editable. This enumerated
             attribute can have the values true, false and inherited.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetIsContentEditableAsync">
             <summary>
             Gets if the element is currently contenteditable.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetIsHiddenAsync">
             <summary>
             Gets if the element is hidden.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetHiddenAsync(System.Boolean)">
             <summary>
             Sets if the element is hidden.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetIsDraggableAsync">
             <summary>
             Gets if the element is draggable.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetDraggableAsync(System.Boolean)">
             <summary>
             Sets if the element is draggable.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetAccessKeyAsync">
             <summary>
             Gets the access key assigned to the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetAccessKeyAsync(System.String)">
             <summary>
             Sets the access key assigned to the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetAccessKeyLabelAsync">
             <summary>
             Gets the element's assigned access key.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetContextMenuAsync">
             <summary>
             Gets the assigned context menu.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.SetContextMenuAsync(WebView2.DevTools.Dom.HtmlMenuElement)">
             <summary>
             Sets the assigned context menu.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlElement.GetDropZoneAsync">
             <summary>
             Gets the dropzone for this element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlElementAlignType">
            <summary>
            Indicates alignment of the element's contents with respect to the surrounding context.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementAlignType.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementAlignType.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementAlignType.Justify">
            <summary>
            Justify
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementAlignType.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlElementSelectionDirectionType">
            <summary>
            HtmlButtonElement Type
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementSelectionDirectionType.Forward">
            <summary>
            Forward
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementSelectionDirectionType.Backward">
            <summary>
            Backward
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementSelectionDirectionType.Bone">
            <summary>
            if the direction is unknown or irrelevant. Default value.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlElementSelectModeType">
            <summary>
            HtmlElementSelectMode Type
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementSelectModeType.Select">
            <summary>
            selects the newly inserted text.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementSelectModeType.Start">
            <summary>
            moves the selection to just before the inserted text.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementSelectModeType.End">
            <summary>
            moves the selection to just after the inserted text.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.HtmlElementSelectModeType.Preserve">
            <summary>
            attempts to preserve the selection. This is the default.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlFormElement">
            <summary>
            The HTMLFormElement interface represents a form element in the DOM.
            It allows access to—and, in some cases, modification of—aspects
            of the form, as well as access to its component elements.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement" />
             <summary>
             Represents the form HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SubmitAsync">
             <summary>
             Submits the form element from the form element itself.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.ResetAsync">
             <summary>
             Resets the form to the previous (default) state.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.CheckValidityAsync">
             <summary>
             Checks if the form is valid, i.e. if all fields fulfill their requirements.
             </summary>
             <returns>True if the form is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.ReportValidityAsync">
             <summary>
             Reports the current validity state after checking the current state
             interactively the constraints of the form element.
             </summary>
             <returns>True if the form element is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.RequestAutocompleteAsync">
             <summary>
             Requests the input fields to be automatically filled with previous entries.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetAcceptCharsetAsync">
             <summary>
             Gets the character encodings that are to be used for the submission.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetAcceptCharsetAsync(System.String)">
             <summary>
             Sets the character encodings that are to be used for the submission.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetActionAsync">
             <summary>
             Gets the form's name within the forms collection.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetActionAsync(System.String)">
             <summary>
             Sets the form's name within the forms collection.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetAutocompleteAsync">
             <summary>
             Gets if autocomplete is turned on or off.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetAutocompleteAsync(System.String)">
             <summary>
             Sets if autocomplete is turned on or off.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetEnctypeAsync">
             <summary>
             Gets the encoding to use for sending the form.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetEnctypeAsync(System.String)">
             <summary>
             Sets the encoding to use for sending the form.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetEncodingAsync">
             <summary>
             Gets the encoding to use for sending the form.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetEncodingAsync(System.String)">
             <summary>
             Sets the encoding to use for sending the form.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetMethodAsync">
             <summary>
             Gets the method to use for transmitting the form.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetMethodAsync(System.String)">
             <summary>
             Sets the method to use for transmitting the form.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetNameAsync">
             <summary>
             Gets the value of the name attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetNameAsync(System.String)">
             <summary>
             Sets the value of the name attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetNoValidateAsync">
             <summary>
             Gets the indicator that the form is not to be validated during submission.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetNoValidateAsync(System.Boolean)">
             <summary>
             Sets the indicator that the form is not to be validated during submission.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetTargetAsync">
             <summary>
             Gets the target name of the response to the request.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.SetTargetAsync(System.String)">
             <summary>
             Sets the target name of the response to the request.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetLengthAsync">
             <summary>
             Gets the number of elements in the Elements collection.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFormElement.GetElementsAsync">
             <summary>
             Gets all the form controls belonging to this form element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlImageElement">
            <summary>
            The HTMLImageElement interface represents an HTML img element,
            providing the properties and methods used to manipulate image elements.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement" />
             <summary>
             Represents the image HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetDisabledAsync(System.String)">
            <summary>
            Gets the (alternate) text to display when the image specified by the img element is not loaded.
            </summary>
            <param name="alt">alt text</param>
            <returns>A Task that when awaited sets the alt property</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetCompleteAsync">
            <summary>
            Returns a boolean value that is true if the browser has finished fetching the image, whether successful or not.
            That means this value is also true if the image has no src value indicating an image to load.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetCrossOriginnAsync(System.String)">
            <summary>
            Sets a string that corresponds to the CORS setting for this link element.
            </summary>
            <param name="crossOrigin">Is a DOMString reflecting the CORS setting</param>
            <returns>A Task that when awaited sets the crossOrigin property</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin" />
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetXAsync">
            <summary>
            Gets the horizontal offset of the left border edge of the image's
            CSS layout box relative to the origin of the html element's containing block.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetYAsync">
            <summary>
            Gets the vertical offset of the top border edge of the image's
            CSS layout box relative to the origin of the html element's containing block.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetAlignAsync">
            <summary>
            Gets the align property
            </summary>
            <returns><see cref="T:WebView2.DevTools.Dom.HtmlElementAlignType"/></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetAlignAsync(WebView2.DevTools.Dom.HtmlElementAlignType)">
            <summary>
            Sets the align property
            </summary>
            <param name="align">align</param>
            <returns>A Task that when awaited sets the align property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.DecodeAsync">
            <summary>
            Returns a Task that resolves when the image is decoded and it's safe to append the image to the DOM.
            This prevents rendering of the next frame from having to pause to decode the image, as would happen if an undecoded image were added to the DOM.
            </summary>
            <returns>Returns a Task that resolves when the image is decoded and it's safe to append the image to the DOM.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetAltAsync">
             <summary>
             Gets the alternative text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetAltAsync(System.String)">
             <summary>
             Sets the alternative text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetCurrentSrcAsync">
             <summary>
             Gets the actual used image source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetSrcAsync">
             <summary>
             Gets the image source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetSrcAsync(System.String)">
             <summary>
             Sets the image source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetSourceSetAsync">
             <summary>
             Gets the image candidates for higher density images.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetSrcsetAsync(System.String)">
             <summary>
             Sets the image candidates for higher density images.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetSizesAsync">
             <summary>
             Gets the sizes to responsively.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetSizesAsync(System.String)">
             <summary>
             Sets the sizes to responsively.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetCrossOriginAsync">
             <summary>
             Gets the cross-origin attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetCrossOriginAsync(System.String)">
             <summary>
             Sets the cross-origin attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetUseMapAsync">
             <summary>
             Gets the usemap attribute, which indicates that the image
             has an associated image map.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetUseMapAsync(System.String)">
             <summary>
             Sets the usemap attribute, which indicates that the image
             has an associated image map.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetIsMapAsync">
             <summary>
             Gets if the image element is a map. The attribute must not
             be specified on an element that does not have an ancestor a
             element with an href attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetIsMapAsync(System.Boolean)">
             <summary>
             Sets if the image element is a map. The attribute must not
             be specified on an element that does not have an ancestor a
             element with an href attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetWidthAsync">
             <summary>
             Gets the displayed width of the image element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetWidthAsync(System.Int32)">
             <summary>
             Sets the displayed width of the image element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetHeightAsync">
             <summary>
             Gets the displayed width of the image element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.SetHeightAsync(System.Int32)">
             <summary>
             Sets the displayed width of the image element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetOriginalWidthAsync">
             <summary>
             Gets the width of the image.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetOriginalHeightAsync">
             <summary>
             Gets the height of the image.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlImageElement.GetcompleteAsync">
             <summary>
             Gets if the image is completely available.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlInputElement">
            <summary>
            The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of input elements.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement" />
             <summary>
             Represents the input HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetSelectionDirectionAsync(System.String)">
            <summary>
            Returns the direction in which selection occurred. This is "forward" if selection was performed
            in the start-to-end direction of the current locale, or "backward" for the opposite direction.
            This can also be "none" if the direction is unknown.
            </summary>
            <param name="value">string</param>
            <returns>A Task that when awaited sets the value property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.ClickElementAsync">
            <summary>
            Calls the click() method on the element
            Not to be confused with <see cref="M:WebView2.DevTools.Dom.HtmlElement.ClickAsync(WebView2.DevTools.Dom.Input.ClickOptions)"/> which
            actually simulates a mouse click, moves the mouse, sends down and up events
            /// </summary>
            <returns>A Task that when awaited clicks the input element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.ShowPickerAsync">
            <summary>
            A browser picker is shown when the element is one of these types: "date", "month", "week", "time", "datetime-local", "color", or "file". It can also be prepopulated with items from a datalist element or autocomplete attribute.
            </summary>
            <returns>A Task that when awaited calls the showPicker method on the input element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetRangeTextAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{WebView2.DevTools.Dom.HtmlElementSelectModeType})">
            <summary>
            Replaces a range of text in the element with new text.
            </summary>
            <param name="replacement">replacement text</param>
            <param name="start">start index</param>
            <param name="end">end index</param>
            <param name="selectMode">how the selection should be set after the text has been replaced.</param>
            <returns>A Task that when awaited selects the contents of the control</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetSelectionRangeAsync(System.Int32,System.Int32,System.Nullable{WebView2.DevTools.Dom.HtmlElementSelectionDirectionType})">
            <summary>
            Selects a range of text in the element (but does not focus it).
            </summary>
            <param name="start">start index</param>
            <param name="end">end index</param>
            <param name="selectionDirection ">indicating the direction in which the selection is considered to have been performed.</param>
            <returns>A Task that when awaited sets the start and end positions of the current text selection</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetValueAsync``1">
            <summary>
            Returns current value of the control. If the user enters a value different from the value expected, this may return an empty string.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.StepUpAsync(System.Int32)">
             <summary>
             Increments the value by (step * n), where n defaults to 1 if not
             specified.
             </summary>
             <param name="n">Optional: The number of steps to take.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.StepDownAsync(System.Int32)">
             <summary>
             Decrements the value by (step * n), where n defaults to 1 if not
             specified.
             </summary>
             <param name="n">Optional: The number of steps to take.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SelectAsync">
             <summary>
             Selects the contents of the textarea.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetSelectionRangeAsync(System.Int32,System.Int32,System.String)">
             <summary>
             Selects a range of text, and sets selectionStart and selectionEnd.
             If either argument is greater than the length of the value, it is
             treated as pointing to the end of the value. If end is less than
             start, then both are treated as the value of end.
             </summary>
             <param name="selectionStart">The start of the selection.</param>
             <param name="selectionEnd">The end of the selection.</param>
             <param name="selectionDirection">
             Optional: The direction of the selection.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetAutofocusAsync">
             <summary>
             Gets the autofocus HTML attribute, which indicates whether
             the control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetAutofocusAsync(System.Boolean)">
             <summary>
             Sets the autofocus HTML attribute, which indicates whether
             the control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetAcceptAsync">
             <summary>
             Gets the accept HTML attribute, containing comma-separated
             list of file types accepted by the server when type is file.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetAcceptAsync(System.String)">
             <summary>
             Sets the accept HTML attribute, containing comma-separated
             list of file types accepted by the server when type is file.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetAutocompleteAsync">
             <summary>
             Gets the autocomplete HTML attribute, indicating whether
             the value of the control can be automatically completed by the
             browser. Ignored if the value of the type attribute is hidden,
             checkbox, radio, file, or a button type (button, submit, reset,
             image).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetAutocompleteAsync(System.String)">
             <summary>
             Sets the autocomplete HTML attribute, indicating whether
             the value of the control can be automatically completed by the
             browser. Ignored if the value of the type attribute is hidden,
             checkbox, radio, file, or a button type (button, submit, reset,
             image).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetDisabledAsync">
             <summary>
             Gets if the textarea is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the textarea is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetFilesAsync">
             <summary>
             Gets a list of selected files.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetNameAsync">
             <summary>
             Gets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetTypeAsync">
             <summary>
             Gets the type of input control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of input control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetRequiredAsync">
             <summary>
             Gets if the field is required.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetRequiredAsync(System.Boolean)">
             <summary>
             Sets if the field is required.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetReadOnlyAsync">
             <summary>
             Gets if the field is read-only.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetReadOnlyAsync(System.Boolean)">
             <summary>
             Sets if the field is read-only.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetAltAsync">
             <summary>
             Gets the alternative text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetAltAsync(System.String)">
             <summary>
             Sets the alternative text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetSrcAsync">
             <summary>
             Gets the image source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetSrcAsync(System.String)">
             <summary>
             Sets the image source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetMaximumAsync">
             <summary>
             Gets max HTML attribute, containing the maximum (numeric
             or date-time) value for this item, which must not be less than its
             minimum (min attribute) value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetMaxAsync(System.String)">
             <summary>
             Sets max HTML attribute, containing the maximum (numeric
             or date-time) value for this item, which must not be less than its
             minimum (min attribute) value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetMinimumAsync">
             <summary>
             Gets the min HTML attribute, containing the minimum (numeric
             or date-time) value for this item, which must not be greater than
             its maximum (max attribute) value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetMinAsync(System.String)">
             <summary>
             Sets the min HTML attribute, containing the minimum (numeric
             or date-time) value for this item, which must not be greater than
             its maximum (max attribute) value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetPatternAsync">
             <summary>
             Gets the pattern HTML attribute, containing a regular
             expression that the control's value is checked against. The pattern
             must match the entire value, not just some subset. This attribute
             applies when the value of the type attribute is text, search, tel,
             url or email; otherwise it is ignored.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetPatternAsync(System.String)">
             <summary>
             Sets the pattern HTML attribute, containing a regular
             expression that the control's value is checked against. The pattern
             must match the entire value, not just some subset. This attribute
             applies when the value of the type attribute is text, search, tel,
             url or email; otherwise it is ignored.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetStepAsync">
             <summary>
             Gets the step HTML attribute, which works with min and max
             to limit the increments at which a numeric or date-time value can be
             set. It can be the string any or a positive floating point number.
             If this is not set to any, the control accepts only values at
             multiples of the step value greater than the minimum.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetStepAsync(System.String)">
             <summary>
             Sets the step HTML attribute, which works with min and max
             to limit the increments at which a numeric or date-time value can be
             set. It can be the string any or a positive floating point number.
             If this is not set to any, the control accepts only values at
             multiples of the step value greater than the minimum.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetListAsync">
             <summary>
             Gets the datalist element in the same document. Only options that
             are valid values for this input element will be displayed. This
             attribute is ignored when the type attribute's value is hidden,
             checkbox, radio, file, or a button type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetFormActionAsync">
             <summary>
             Gets the URI of a resource that processes information
             submitted by the button. If specified, this attribute overrides the
             action attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetFormActionAsync(System.String)">
             <summary>
             Sets the URI of a resource that processes information
             submitted by the button. If specified, this attribute overrides the
             action attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetFormEncTypeAsync">
             <summary>
             Gets the type of content that is used to submit the form to
             the server. If specified, this attribute overrides the enctype
             attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetFormEncTypeAsync(System.String)">
             <summary>
             Sets the type of content that is used to submit the form to
             the server. If specified, this attribute overrides the enctype
             attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetFormMethodAsync">
             <summary>
             Gets the HTTP method that the browser uses to submit the
             form. If specified, this attribute overrides the method attribute
             of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetFormMethodAsync(System.String)">
             <summary>
             Sets the HTTP method that the browser uses to submit the
             form. If specified, this attribute overrides the method attribute
             of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetFormNoValidateAsync">
             <summary>
             Gets that the form is not to be validated when it is
             submitted. If specified, this attribute overrides the enctype
             attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetFormNoValidateAsync(System.Boolean)">
             <summary>
             Sets that the form is not to be validated when it is
             submitted. If specified, this attribute overrides the enctype
             attribute of the form element that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetFormTargetAsync">
             <summary>
             Gets A name or keyword indicating where to display the
             response that is received after submitting the form. If specified,
             this attribute overrides the target attribute of the form element
             that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetFormTargetAsync(System.String)">
             <summary>
             Sets A name or keyword indicating where to display the
             response that is received after submitting the form. If specified,
             this attribute overrides the target attribute of the form element
             that owns this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetDefaultValueAsync">
             <summary>
             Gets the default value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetDefaultValueAsync(System.String)">
             <summary>
             Sets the default value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetValueAsync">
             <summary>
             Gets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetValueAsync(System.String)">
             <summary>
             Sets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetValueAsNumberAsync">
             <summary>
             Gets the value of the element, interpreted as one of the
             following in order:
             1.) Time value
             2.) Number
             3.) otherwise NaN.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetValueAsNumberAsync(System.Double)">
             <summary>
             Sets the value of the element, interpreted as one of the
             following in order:
             1.) Time value
             2.) Number
             3.) otherwise NaN.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetValueAsDateAsync">
             <summary>
             Gets the value of the element, interpreted as a date, or
             null if conversion is not possible.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetValueAsDateAsync(System.Nullable{System.DateTime})">
             <summary>
             Sets the value of the element, interpreted as a date, or
             null if conversion is not possible.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetIndeterminateAsync">
             <summary>
             Gets if the state if indeterminate.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetIndeterminateAsync(System.Boolean)">
             <summary>
             Sets if the state if indeterminate.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetIsDefaultCheckedAsync">
             <summary>
             Gets
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetDefaultCheckedAsync(System.Boolean)">
             <summary>
             Sets
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetCheckedAsync">
             <summary>
             Gets if the input element is checked or not.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetCheckedAsync(System.Boolean)">
             <summary>
             Sets if the input element is checked or not.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetSizeAsync">
             <summary>
             Gets the display size of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetSizeAsync(System.Int32)">
             <summary>
             Sets the display size of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetMultipleAsync">
             <summary>
             Gets the multiple HTML attribute, whichindicates whether
             multiple items can be selected.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetMultipleAsync(System.Boolean)">
             <summary>
             Sets the multiple HTML attribute, whichindicates whether
             multiple items can be selected.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetMaxLengthAsync">
             <summary>
             Gets the maxlength HTML attribute, indicating the maximum
             number of characters the user can enter. This constraint is
             evaluated only when the value changes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetMaxLengthAsync(System.Int32)">
             <summary>
             Sets the maxlength HTML attribute, indicating the maximum
             number of characters the user can enter. This constraint is
             evaluated only when the value changes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetMinLengthAsync">
             <summary>
             Gets the minlength HTML attribute, indicating the minimum
             number of characters the user can enter. This constraint is
             evaluated only when the value changes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetMinLengthAsync(System.Int32)">
             <summary>
             Sets the minlength HTML attribute, indicating the minimum
             number of characters the user can enter. This constraint is
             evaluated only when the value changes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetPlaceholderAsync">
             <summary>
             Gets the placeholder HTML attribute, containing a hint to
             the user about what to enter in the control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetPlaceholderAsync(System.String)">
             <summary>
             Sets the placeholder HTML attribute, containing a hint to
             the user about what to enter in the control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetWidthAsync">
             <summary>
             Gets the display width of the input element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetWidthAsync(System.Int32)">
             <summary>
             Sets the display width of the input element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetHeightAsync">
             <summary>
             Gets the display height of the input element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetHeightAsync(System.Int32)">
             <summary>
             Sets the display height of the input element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetSelectionDirectionAsync">
             <summary>
             Gets the direction in which selection occurred. This is "forward" if
             selection was performed in the start-to-end direction of the current
             locale, or "backward" for the opposite direction.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetDirectionNameAsync">
             <summary>
             Gets the directionality of the form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetDirNameAsync(System.String)">
             <summary>
             Sets the directionality of the form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetSelectionStartAsync">
             <summary>
             Gets the index of the beginning of selected text. If no
             text is selected, contains the index of the character that
             follows the input cursor. On being set, the control behaves as if
             setSelectionRange() had been called with this as the first argument,
             and selectionEnd as the second argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetSelectionStartAsync(System.Int32)">
             <summary>
             Sets the index of the beginning of selected text. If no
             text is selected, contains the index of the character that
             follows the input cursor. On being set, the control behaves as if
             setSelectionRange() had been called with this as the first argument,
             and selectionEnd as the second argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetSelectionEndAsync">
             <summary>
             Gets the index of the end of selected text. If no text
             is selected, contains the index of the character that follows the
             input cursor. On being set, the control behaves as if
             setSelectionRange() had been called with this as the second
             argument, and selectionStart as the first argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.SetSelectionEndAsync(System.Int32)">
             <summary>
             Sets the index of the end of selected text. If no text
             is selected, contains the index of the character that follows the
             input cursor. On being set, the control behaves as if
             setSelectionRange() had been called with this as the second
             argument, and selectionStart as the first argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInputElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlLinkElement">
            <summary>
            The HTMLLinkElement interface represents reference information for external resources
            and the relationship of those resources to a document and vice-versa
            (corresponds to link element; not to be confused with a, which is represented by HTMLAnchorElement).
            This object inherits all of the properties and methods of the HTMLElement interface.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement" />
             <summary>
             Represents a link HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetAsAsync">
            <summary>
            Gets a string representing the type of content being loaded by the HTML link.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetAsAsync(System.String)">
            <summary>
            Gets a string representing the type of content being loaded by the HTML link.
            </summary>
            <param name="as">string</param>
            <returns>A Task that when awaited sets the as property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetDisabledAsync">
             <summary>
             Gets if the stylesheet is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the stylesheet is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetHrefAsync">
             <summary>
             Gets the URI for the target resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetHrefAsync(System.String)">
             <summary>
             Sets the URI for the target resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetRelationAsync">
             <summary>
             Gets the forward relationship of the linked resource from the document to the resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetRelAsync(System.String)">
             <summary>
             Sets the forward relationship of the linked resource from the document to the resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetReverseRelationAsync">
             <summary>
             Gets the reverse relationship of the linked resource from the resource to the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetRevAsync(System.String)">
             <summary>
             Sets the reverse relationship of the linked resource from the resource to the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetRelationListAsync">
             <summary>
             Gets the list of relations contained in the rel attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetMediaAsync">
             <summary>
             Gets the use with one or more target media.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetMediaAsync(System.String)">
             <summary>
             Sets the use with one or more target media.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetTargetLanguageAsync">
             <summary>
             Gets the language code for the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetHreflangAsync(System.String)">
             <summary>
             Sets the language code for the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetTypeAsync">
             <summary>
             Gets the content type of the style sheet language.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetTypeAsync(System.String)">
             <summary>
             Sets the content type of the style sheet language.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetSizesAsync">
             <summary>
             Gets the list of sizes defined in the sizes attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetIntegrityAsync">
             <summary>
             Gets the linked source's integrity, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetIntegrityAsync(System.String)">
             <summary>
             Sets the linked source's integrity, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetCrossOriginAsync">
             <summary>
             Gets the cross-origin attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetCrossOriginAsync(System.String)">
             <summary>
             Sets the cross-origin attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetNumberUsedOnceAsync">
             <summary>
             Gets the nonce attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.SetNonceAsync(System.String)">
             <summary>
             Sets the nonce attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetSheetAsync">
             <summary>
             Gets the StyleSheet object associated with the given element, or
             null if there is none.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLinkElement.GetImportAsync">
             <summary>
             Gets the Document object associated with the given element, or null
             if there is none.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlOptionElement">
            <summary>
            The HTMLOptionElement interface represents option elements and inherits all properties and methods of the <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> class.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement" />
             <summary>
             Represents the option HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetDisabledAsync">
             <summary>
             Gets if the option is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the option is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetLabelAsync">
             <summary>
             Gets the label.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.SetLabelAsync(System.String)">
             <summary>
             Sets the label.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetDefaultSelectedAsync">
             <summary>
             Gets if the option is selected by default.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.SetDefaultSelectedAsync(System.Boolean)">
             <summary>
             Sets if the option is selected by default.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetSelectedAsync">
             <summary>
             Gets if the option is currently selected.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.SetSelectedAsync(System.Boolean)">
             <summary>
             Sets if the option is currently selected.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetValueAsync">
             <summary>
             Gets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.SetValueAsync(System.String)">
             <summary>
             Sets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetTextAsync">
             <summary>
             Gets the text of the option.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.SetTextAsync(System.String)">
             <summary>
             Sets the text of the option.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionElement.GetIndexAsync">
             <summary>
             Gets the index of the option element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlParagraphElement">
            <summary>
            The HTMLParagraphElement interface provides special properties
            (beyond those of the regular HTMLElement object interface it inherits) for manipulating p elements.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement" />
             <summary>
             Represents the p HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlParagraphElement.GetAlignAsync">
            <summary>
            Gets the align property
            </summary>
            <returns><see cref="T:WebView2.DevTools.Dom.HtmlElementAlignType"/></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlParagraphElement.SetAlignAsync(WebView2.DevTools.Dom.HtmlElementAlignType)">
            <summary>
            Sets the align property
            </summary>
            <param name="align">align</param>
            <returns>A Task that when awaited sets the align property</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlSelectElement">
            <summary>
            The HTMLSelectElement interface represents a select HTML Element.
            These elements also share all of the properties and methods of other HTML elements via the <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> class.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement" />
             <summary>
             Represents the select HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetSelectedIndexAsync(System.Int32)">
            <summary>
            Sets the index of the first selected option element. The value -1 indicates no element is selected.
            </summary>
            <param name="index">width in CSS pixels</param>
            <returns>A Task that when awaited sets the href property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.AddAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new Option element and then adds it to the collection of option elements for this select element.
            </summary>
            <param name="value">value</param>
            <param name="text">text</param>
            <param name="before">If this parameter is null (or the index does not exist), the new element is appended to the end of the collection.</param>
            <returns>A Task that when awaited adds the element at the specified index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.AddAsync(WebView2.DevTools.Dom.HtmlOptionElement,System.Nullable{System.Int32})">
            <summary>
            Adds an element to the collection of option elements for this select element.
            </summary>
            <param name="element">element</param>
            <param name="before">If this parameter is null (or the index does not exist), the new element is appended to the end of the collection.</param>
            <returns>A Task that when awaited adds the element at the specified index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.ItemAsync(System.Int32)">
            <summary>
            Gets an item from the options collection for this select element.
            </summary>
            <param name="index">index</param>
            <returns>A Task that when awaited gets the element at the specified index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.NamedItemAsync(System.String)">
            <summary>
            Gets the item in the options collection with the specified name. The name string can match either the id or the name attribute of an option node.
            </summary>
            <param name="name">name</param>
            <returns>A Task that when awaited gets the element at the specified index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.AddAsync(WebView2.DevTools.Dom.HtmlOptionElement,WebView2.DevTools.Dom.HtmlElement)">
             <summary>
             Adds an option element to the options collection.
             </summary>
             <param name="element">The element to add.</param>
             <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.AddAsync(WebView2.DevTools.Dom.HtmlOptionsGroupElement,WebView2.DevTools.Dom.HtmlElement)">
             <summary>
             Adds an options group element to the options collection.
             </summary>
             <param name="element">The element to add.</param>
             <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.RemoveAsync(System.Int32)">
             <summary>
             Removes an element from the options collection.
             </summary>
             <param name="index">The index of the element of remove.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetAutofocusAsync">
             <summary>
             Gets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetAutofocusAsync(System.Boolean)">
             <summary>
             Sets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetDisabledAsync">
             <summary>
             Gets if the button is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the button is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetNameAsync">
             <summary>
             Gets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetValueAsync">
             <summary>
             Gets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetValueAsync(System.String)">
             <summary>
             Sets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetTypeAsync">
             <summary>
             Gets the type of input element (select).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetRequiredAsync">
             <summary>
             Gets if the field is required.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetRequiredAsync(System.Boolean)">
             <summary>
             Sets if the field is required.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetSelectedOptionsAsync">
             <summary>
             Gets the set of options that are selected.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetSizeAsync">
             <summary>
             Gets the display size of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetSizeAsync(System.Int32)">
             <summary>
             Sets the display size of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetOptionsAsync">
             <summary>
             Gets the set of option elements contained by this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetLengthAsync">
             <summary>
             Gets the number of option elements in this select element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetMultipleAsync">
             <summary>
             Gets the multiple HTML attribute, whichindicates whether multiple items can be selected.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.SetMultipleAsync(System.Boolean)">
             <summary>
             Sets the multiple HTML attribute, whichindicates whether multiple items can be selected.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetSelectedIndexAsync">
             <summary>
             Gets the index of the first selected option element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSelectElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlSpanElement">
            <summary>
            The HTMLSpanElement interface represents a span element and derives from the <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> interface,
            but without implementing any additional properties or methods.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement" />
             <summary>
             Represents the span HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTableCellElement">
            <summary>
            The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance)
            for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement" />
             <summary>
             Reprsents the base for td / th HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.SetAbbrAsync(System.String)">
            <summary>
            Sets a string which can be used on th elements (not on td), specifying an alternative label for the header cell.
            This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell.
            This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool.
            Usually the value of abbr is an abbreviation or acronym, but can be any text that's appropriate contextually.
            </summary>
            <param name="abbr">abbr</param>
            <returns>A Task that when awaited sets the abbr property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.GetAbbrAsync">
            <summary>
            Gets a string which can be used on th elements (not on td), specifying an alternative label for the header cell.
            This alternate label can be used in other contexts, such as when describing the headers that apply to a data cell.
            This is used to offer a shorter term for use by screen readers in particular, and is a valuable accessibility tool.
            Usually the value of abbr is an abbreviation or acronym, but can be any text that's appropriate contextually.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.GetCellIndexAsync">
            <summary>
            A integer representing the cell's position in the cells collection of the tr the cell is contained within. If the cell doesn't belong to a tr, it returns -1.
            </summary>
            <returns>Index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.SetScopeAsync(System.String)">
            <summary>
            Sets a string indicating the scope of a th cell. Header cells can be configured, using the scope property, the apply to a specified row or column,
            or to the not-yet-scoped cells within the current row group (that is, the same ancestor thead, tbody, or tfoot element).
            If no value is specified for scope, the header is not associated directly with cells in this way.
            </summary>
            <param name="scope">scope</param>
            <returns>A Task that when awaited sets the scope property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.GetScopeAsync">
            <summary>
            Gets a string indicating the scope of a th cell. Header cells can be configured, using the scope property, the apply to a specified row or column,
            or to the not-yet-scoped cells within the current row group (that is, the same ancestor thead, tbody, or tfoot element).
            If no value is specified for scope, the header is not associated directly with cells in this way.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.GetColSpanAsync">
             <summary>
             Gets the number of columns spanned by cell.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.SetColSpanAsync(System.Int32)">
             <summary>
             Sets the number of columns spanned by cell.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.GetRowSpanAsync">
             <summary>
             Gets the number of rows spanned by cell.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.SetRowSpanAsync(System.Int32)">
             <summary>
             Sets the number of rows spanned by cell.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.GetHeadersAsync">
             <summary>
             Gets the list of id attribute values for header cells.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableCellElement.GetIndexAsync">
             <summary>
             Gets the index of this cell in the row, starting from 0.
             This index is in document tree order and not display order.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTableElement">
            <summary>
            The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance)
            for manipulating the layout and presentation of tables in an HTML document.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement" />
             <summary>
             Represents the table HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetTHeadAsync">
            <summary>
            Is a HTMLTableSectionElement representing the first thead that is a child of the element, or null if none is found.
            When set, if the object doesn't represent a thead, a DOMException with the HierarchyRequestError name is thrown.
            If a correct object is given, it is inserted in the tree immediately before the first element that is neither a caption,
            nor a colgroup, or as the last child if there is no such element, and the first thead that is a child of this element is removed from the tree, if any.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetTFootAsync">
            <summary>
            Is a HTMLTableSectionElement representing the first thead that is a child of the element, or null if none is found.
            When set, if the object doesn't represent a thead, a DOMException with the HierarchyRequestError name is thrown.
            If a correct object is given, it is inserted in the tree immediately before the first element that is neither a caption,
            nor a colgroup, or as the last child if there is no such element, and the first thead that is a child of this element is removed from the tree, if any.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetTBodiesAsync">
            <summary>
            Returns a live HTMLCollection containing all the tbody of the element. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes.
            </summary>
            <returns>HTMLCollection</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetBodyAsync">
            <summary>
            Returns the first <see cref="T:WebView2.DevTools.Dom.HtmlTableSectionElement"/> in the tBodies HTMLCollection.
            To get all the bodies use <see cref="M:WebView2.DevTools.Dom.HtmlTableElement.GetTBodiesAsync"/> instead.
            </summary>
            <returns>HtmlTableSectionElement</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.InsertRowAsync">
            <summary>
            Returns an HTMLTableRowElement representing a new row of the table. The new cell is appended to the collection.
            </summary>
            <returns>A Task that when awaited inserts the cell at the specified index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.CreateCaptionAsync">
             <summary>
             Creates a new table caption object or returns the existing one.
             </summary>
             <returns>A caption element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.DeleteCaptionAsync">
             <summary>
             Deletes the table caption, if one exists.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.CreateTHeadAsync">
             <summary>
             Creates a new table header section or returns the existing one.
             </summary>
             <returns>A table header element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.DeleteTHeadAsync">
             <summary>
             Deletes the header from the table, if one exists.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.CreateTFootAsync">
             <summary>
             Creates a table footer section or returns an existing one.
             </summary>
             <returns>A footer element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.DeleteTFootAsync">
             <summary>
             Deletes the footer from the table, if one exists.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.CreateTBodyAsync">
             <summary>
             Creates a new table body section.
             </summary>
             <returns>A body element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.InsertRowAsync(System.Int32)">
             <summary>
             Inserts a new empty row in the table. The new row is inserted immediately before
             and in the same section as the current indexth row in the table. If index is -1
             or equal to the number of rows, the new row is appended. In addition, when the
             table is empty the row is inserted into a TBODY which is created and inserted
             into the table.
             </summary>
             <param name="index">
             The row number where to insert a new row. This index starts from 0 and is relative
             to the logical order (not document order) of all the rows contained inside the table.
             </param>
             <returns>The inserted table row.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.DeleteRowAsync(System.Int32)">
             <summary>
             Deletes a table row.
             </summary>
             <param name="index">
             The index of the row to be deleted. This index starts from 0 and is relative to the
             logical order (not document order) of all the rows contained inside the table. If the
             index is -1 the last row in the table is deleted.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetCaptionAsync">
             <summary>
             Gets the assigned caption element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.SetCaptionAsync(WebView2.DevTools.Dom.HtmlTableCaptionElement)">
             <summary>
             Sets the assigned caption element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetHeadAsync">
             <summary>
             Gets the assigned head section.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.SetTHeadAsync(WebView2.DevTools.Dom.HtmlTableSectionElement)">
             <summary>
             Sets the assigned head section.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetFootAsync">
             <summary>
             Gets the assigned foot section.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.SetTFootAsync(WebView2.DevTools.Dom.HtmlTableSectionElement)">
             <summary>
             Sets the assigned foot section.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetBodiesAsync">
             <summary>
             Gets the assigned body sections.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetRowsAsync">
             <summary>
             Gets the assigned table rows.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.GetBorderAsync">
             <summary>
             Gets the border attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableElement.SetBorderAsync(System.UInt32)">
             <summary>
             Sets the border attribute.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTableRowElement">
            <summary>
            The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance)
            for manipulating the layout and presentation of rows in an HTML table.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement" />
             <summary>
             Represents the tr HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.GetRowIndexAsync">
            <summary>
            Returns a long value which gives the logical position of the row within the entire table. If the row is not part of a table, returns -1.
            </summary>
            <returns>Index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.GetSectionRowIndexAsync">
            <summary>
            Returns a value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns -1.
            </summary>
            <returns>Index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.DeleteCellAsync(WebView2.DevTools.Dom.HtmlTableCellElement)">
            <summary>
            Removes the cell. Equivilent to calling cellIndex and deleteCell
            </summary>
            <param name="cell">Cell to delete</param>
            <returns>A Task that when awaited deletes the cell</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.InsertCellAsync(System.Int32)">
            <summary>
            Returns an HTMLTableCellElement representing a new cell of the row.
            The cell is inserted in the collection of cells immediately before the given index position in the row.
            If index is -1, the new cell is appended to the collection.
            If index is less than -1 or greater than the number of cells in the collection, a DOMException with the value IndexSizeError is raised.
            </summary>
            <param name="index">
            The cell is inserted in the collection of cells immediately before the given index position in the row.
            If index is -1, the new cell is appended to the collection.
            If index is less than -1 or greater than the number of cells in the collection, a DOMException with the value IndexSizeError is raised.
            </param>
            <returns>A Task that when awaited inserts the cell at the specified index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.InsertCellAsync(System.Int32,System.String)">
            <summary>
            Returns an HTMLTableCellElement representing a new cell of the row.
            The cell is inserted in the collection of cells immediately before the given index position in the row.
            If index is -1, the new cell is appended to the collection.
            If index is less than -1 or greater than the number of cells in the collection, a DOMException with the value IndexSizeError is raised.
            </summary>
            <param name="index">
            The cell is inserted in the collection of cells immediately before the given index position in the row.
            If index is -1, the new cell is appended to the collection.
            If index is less than -1 or greater than the number of cells in the collection, a DOMException with the value IndexSizeError is raised.
            </param>
            <param name="text">Text that will be set as the innerText of the newly created element</param>
            <returns>A Task that when awaited inserts the cell at the specified index</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.InsertCellAsync(System.Int32,WebView2.DevTools.Dom.TableCellKind)">
             <summary>
             Insert an empty TD or TH cell into this row. If index is -1 or equal to
             the number of cells, the new cell is appended.
             </summary>
             <param name="index">
             [Optional] The place to insert the cell, starting from 0. A negative
             value indicates that the cell should be appended to the row.
             </param>
             <param name="tableCellKind">
             [Optional] The kind of table cell to insert.
             </param>
             <returns>The inserted table cell.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.DeleteCellAsync(System.Int32)">
             <summary>
             Deletes a cell from the current row.
             </summary>
             <param name="index">
             The index of the cell to delete, starting from 0. If the index is
             -1 the last cell in the row is deleted.
             </param>
             <returns>The current row.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.GetIndexAsync">
             <summary>
             Gets the index in the logical order and not in document order.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.GetIndexInSectionAsync">
             <summary>
             Gets the index of this row, relative to the current section starting
             from 0.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableRowElement.GetCellsAsync">
             <summary>
             Gets the assigned table cells.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTableSectionElement">
            <summary>
            The HTMLTableSectionElement interface provides special properties and methods
            (beyond the HTMLElement interface it also has available to it by inheritance)
            for manipulating the layout and presentation of sections, that is headers,
            footers and bodies, in an HTML table.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement" />
             <summary>
             Represent the base of table section (tbody, thead, tfoot) elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableSectionElement.InsertRowAsync(System.Int32)">
             <summary>
             Inserts a row into this section. The new row is inserted immediately before the
             current indexth row in this section. If index is -1 or equal to the number of
             rows in this section, the new row is appended.
             </summary>
             <param name="index">
             The row number where to insert a new row. This index starts from 0 and is relative
             only to the rows contained inside this section, not all the rows in the table.
             </param>
             <returns>The inserted table row.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableSectionElement.DeleteRowAsync(System.Int32)">
             <summary>
             Deletes a row from this section.
             </summary>
             <param name="index">
             The index of the row to be deleted, or -1 to delete the last row.
             This index starts from 0 and is relative only to the rows contained
             inside this section, not all the rows in the table.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableSectionElement.GetRowsAsync">
             <summary>
             Gets the assigned table rows.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTextAreaElement">
            <summary>
            The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of textarea elements.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement" />
             <summary>
             Represents the textarea HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetAutoFocusAsync(System.Boolean)">
            <summary>
            Sets a boolean value reflecting the autofocus HTML attribute, which indicates whether the control
            should have input focus when the page loads, unless the user overrides it, for example by typing
            in a different control. Only one form-associated element in a document can have this attribute specified.
            </summary>
            <param name="autoFocus">autoFocus</param>
            <returns>A Task that when awaited sets the autofocus property</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/autofocus"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetColsAsync">
            <summary>
            Returns the element's cols attribute, indicating the visible width of the text area.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetSelectionDirectionAsync(System.String)">
            <summary>
            Returns the direction in which selection occurred. This is "forward" if selection was performed
            in the start-to-end direction of the current locale, or "backward" for the opposite direction.
            This can also be "none" if the direction is unknown.
            </summary>
            <param name="value">string</param>
            <returns>A Task that when awaited sets the value property</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetRangeTextAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{WebView2.DevTools.Dom.HtmlElementSelectModeType})">
            <summary>
            Replaces a range of text in the element with new text.
            </summary>
            <param name="replacement">replacement text</param>
            <param name="start">start index</param>
            <param name="end">end index</param>
            <param name="selectMode">how the selection should be set after the text has been replaced.</param>
            <returns>A Task that when awaited selects the contents of the control</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetSelectionRangeAsync(System.Int32,System.Int32,System.Nullable{WebView2.DevTools.Dom.HtmlElementSelectionDirectionType})">
            <summary>
            Selects a range of text in the element (but does not focus it).
            </summary>
            <param name="start">start index</param>
            <param name="end">end index</param>
            <param name="selectionDirection ">indicating the direction in which the selection is considered to have been performed.</param>
            <returns>A Task that when awaited sets the start and end positions of the current text selection</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SelectAsync">
             <summary>
             Selects the contents of the textarea.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetSelectionRangeAsync(System.Int32,System.Int32,System.String)">
             <summary>
             Selects a range of text, and sets selectionStart and selectionEnd.
             If either argument is greater than the length of the value, it is treated
             as pointing to the end of the value. If end is less than start, then
             both are treated as the value of end.
             </summary>
             <param name="selectionStart">The start of the selection.</param>
             <param name="selectionEnd">The end of the selection.</param>
             <param name="selectionDirection">Optional: The direction of the selection.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetAutofocusAsync">
             <summary>
             Gets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetAutofocusAsync(System.Boolean)">
             <summary>
             Sets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetDisabledAsync">
             <summary>
             Gets if the textarea is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the textarea is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetNameAsync">
             <summary>
             Gets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetTypeAsync">
             <summary>
             Gets the type (textarea).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetRequiredAsync">
             <summary>
             Gets if the field is required.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetRequiredAsync(System.Boolean)">
             <summary>
             Sets if the field is required.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetReadOnlyAsync">
             <summary>
             Gets if the field is read-only.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetReadOnlyAsync(System.Boolean)">
             <summary>
             Sets if the field is read-only.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetDefaultValueAsync">
             <summary>
             Gets the default value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetDefaultValueAsync(System.String)">
             <summary>
             Sets the default value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetValueAsync">
             <summary>
             Gets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetValueAsync(System.String)">
             <summary>
             Sets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetWrapAsync">
             <summary>
             Gets the wrap HTML attribute, indicating how the control wraps text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetWrapAsync(System.String)">
             <summary>
             Sets the wrap HTML attribute, indicating how the control wraps text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetTextLengthAsync">
             <summary>
             Gets the codepoint length of the control's value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetRowsAsync">
             <summary>
             Gets the rows HTML attribute, indicating
             the number of visible text lines for the control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetRowsAsync(System.Int32)">
             <summary>
             Sets the rows HTML attribute, indicating
             the number of visible text lines for the control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetColumnsAsync">
             <summary>
             Gets the cols HTML attribute, indicating
             the visible width of the text area.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetColsAsync(System.Int32)">
             <summary>
             Sets the cols HTML attribute, indicating
             the visible width of the text area.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetMaxLengthAsync">
             <summary>
             Gets the maxlength HTML attribute, indicating
             the maximum number of characters the user can enter.
             This constraint is evaluated only when the value changes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetMaxLengthAsync(System.Int32)">
             <summary>
             Sets the maxlength HTML attribute, indicating
             the maximum number of characters the user can enter.
             This constraint is evaluated only when the value changes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetPlaceholderAsync">
             <summary>
             Gets the placeholder HTML attribute, containing a hint to
             the user about what to enter in the control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetPlaceholderAsync(System.String)">
             <summary>
             Sets the placeholder HTML attribute, containing a hint to
             the user about what to enter in the control.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetSelectionDirectionAsync">
             <summary>
             Gets the direction in which selection occurred. This is "forward" if
             selection was performed in the start-to-end direction of the current
             locale, or "backward" for the opposite direction.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetDirectionNameAsync">
             <summary>
             Gets the directionality of the form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetDirNameAsync(System.String)">
             <summary>
             Sets the directionality of the form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetSelectionStartAsync">
             <summary>
             Gets the index of the beginning of selected text.
             If no text is selected, contains the index of the character
             that follows the input cursor. On being set, the control behaves
             as if setSelectionRange() had been called with this as the first
             argument, and selectionEnd as the second argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetSelectionStartAsync(System.Int32)">
             <summary>
             Sets the index of the beginning of selected text.
             If no text is selected, contains the index of the character
             that follows the input cursor. On being set, the control behaves
             as if setSelectionRange() had been called with this as the first
             argument, and selectionEnd as the second argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetSelectionEndAsync">
             <summary>
             Gets the index of the end of selected text. If no text
             is selected, contains the index of the character that follows
             the input cursor. On being set, the control behaves as if
             setSelectionRange() had been called with this as the second
             argument, and selectionStart as the first argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.SetSelectionEndAsync(System.Int32)">
             <summary>
             Sets the index of the end of selected text. If no text
             is selected, contains the index of the character that follows
             the input cursor. On being set, the control behaves as if
             setSelectionRange() had been called with this as the second
             argument, and selectionStart as the first argument.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTextAreaElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.NodeList">
            <summary>
            The HTMLCollection interface represents a generic collection (array-like object similar to arguments)
            of elements (in document order) and offers methods and properties for selecting from the list.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.NodeList.GetLengthAsync">
            <summary>
            Returns the number of items in the collection.
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NodeList.ItemAsync(System.Int32)">
            <summary>
            Returns a File object representing the file at the specified index in the file list.
            https://developer.mozilla.org/en-US/docs/Web/API/FileList#item
            </summary>
            <param name="index">The position of the Node to be returned. Elements appear in an HTMLCollection in the same order in which they appear in the document's source.</param>
            <returns>
            A Task that evaluates to the Node at the specified index,
            or null if index is less than zero or greater than or equal to the length property.
            </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NodeList.ToArrayAsync">
            <summary>
            To Array
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.NodeType">
            <summary>
            Contains an enumeration of various node types.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.Element">
            <summary>
            A standard node element.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.Attribute">
            <summary>
            An attribute node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.Text">
            <summary>
            A text node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.CharacterData">
            <summary>
            A CData text node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.EntityReference">
            <summary>
            An entity reference node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.Entity">
            <summary>
            An entity node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.ProcessingInstruction">
            <summary>
            A processing instruction node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.Comment">
            <summary>
            A comment node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.Document">
            <summary>
            A document node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.DocumentType">
            <summary>
            A document type node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.DocumentFragment">
            <summary>
            A document (fragment mode) node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NodeType.Notation">
            <summary>
            A notation node.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.RangePosition">
            <summary>
            An enumeration of possible values for position comparisons in a range object.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.RangePosition.Before">
            <summary>
            The position of the given point to the other point is before.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.RangePosition.Equal">
            <summary>
            The position of the given point to the other point is equal.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.RangePosition.After">
            <summary>
            The position of the given point to the other point is after.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.RangeType">
            <summary>
            An enumeration with possible values on how to compare boundary points.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.RangeType.StartToStart">
            <summary>
            From the start to the start (periodic).
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.RangeType.StartToEnd">
            <summary>
            From the start to the end (non-periodic).
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.RangeType.EndToEnd">
            <summary>
            From the end to the end (periodic).
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.RangeType.EndToStart">
            <summary>
            From the end to the start (non-periodic).
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.ShadowRootMode">
            <summary>
            List of possible shadow root mode states.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.ShadowRootMode.Open">
            <summary>
            Specifies open encapsulation mode.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.ShadowRootMode.Closed">
            <summary>
            Specifies closed encapsulation mode.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.TableCellKind">
            <summary>
            Represents kinds of table cells.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.TableCellKind.Td">
            <summary>
            Td table cell.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.TableCellKind.Th">
            <summary>
            Th table cell.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlObjectFactory">
            <summary>Html Constants</summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectFactory.CreateObjectInternal(System.String,WebView2.DevTools.Dom.ExecutionContext,Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.DevToolsProtocolHelper,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.Runtime.RemoteObject,WebView2.DevTools.Dom.WebView2DevToolsContext,WebView2.DevTools.Dom.FrameManager)">
            <summary>CreateObject</summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Range">
             <summary>
             The Range interface represents a fragment of a document that can
             contain nodes and parts of text nodes in a given document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SetStartAsync(WebView2.DevTools.Dom.Node,System.Int32)">
             <summary>
             Selects the start of the given range by using the given reference
             node and a relative offset.
             </summary>
             <param name="refNode">The reference node to use.</param>
             <param name="offset">
             The offset relative to the reference node.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SetEndAsync(WebView2.DevTools.Dom.Node,System.Int32)">
             <summary>
             Selects the end of the given range by using the given reference
             node and a relative offset.
             </summary>
             <param name="refNode">The reference node to use.</param>
             <param name="offset">
             The offset relative to the reference node.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SetStartBeforeAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Selects the start of the given range by using an inclusive
             reference node.
             </summary>
             <param name="refNode">The reference node to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SetEndBeforeAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Selects the end of the given range by using an inclusive reference
             node.
             </summary>
             <param name="refNode">The reference node to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SetStartAfterAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Selects the start of the given range by using an exclusive
             reference node.
             </summary>
             <param name="refNode">The reference node to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SetEndAfterAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Selects the end of the given range by using an exclusive reference
             node.
             </summary>
             <param name="refNode">The referenced node.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.CollapseAsync(System.Boolean)">
             <summary>
             Collapses the range to a single level.
             </summary>
             <param name="toStart">
             Determines if only the first level should be selected.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SelectNodeAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Selects the contained node.
             </summary>
             <param name="refNode">The node to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SelectNodeContentsAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Selects the contained nodes by taking a reference node as origin.
             </summary>
             <param name="refNode">The reference node.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.DeleteContentsAsync">
             <summary>
             Clears the contained nodes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.ExtractContentsAsync">
             <summary>
             Clears the node representation and returns a document fragment with
             the originally contained nodes.
             </summary>
             <returns>The document fragment containing the nodes.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.CloneContentsAsync">
             <summary>
             Creates a document fragement of the contained nodes.
             </summary>
             <returns>The created document fragment.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.InsertNodeAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Inserts a node into the range.
             </summary>
             <param name="node">The node to include.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.SurroundContentsAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Includes the given node with its siblings in the range.
             </summary>
             <param name="newParent">The range to surround.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.CloneRangeAsync">
             <summary>
             Creates a copy of this range.
             </summary>
             <returns>The copy representing the same range.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.DetachAsync">
             <summary>
             Detaches the range from the DOM tree.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.IsPointInRangeAsync(WebView2.DevTools.Dom.Node,System.Int32)">
             <summary>
             Checks if the given node is within this range by using a offset.
             </summary>
             <param name="node">The node to check for.</param>
             <param name="offset">The offset to use.</param>
             <returns>
             True if the point is within the range, otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.CompareBoundaryPointsAsync(WebView2.DevTools.Dom.RangeType,WebView2.DevTools.Dom.Range)">
             <summary>
             Compares the boundary points of the range.
             </summary>
             <param name="how">
             Determines how these points should be compared.
             </param>
             <param name="sourceRange">
             The range of the other boundary points.
             </param>
             <returns>A relative position.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.ComparePointAsync(WebView2.DevTools.Dom.Node,System.Int32)">
             <summary>
             Compares the node to the given offset and returns the relative
             position.
             </summary>
             <param name="node">The node to use.</param>
             <param name="offset">The offset to use.</param>
             <returns>The relative position in the range.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.IntersectsNodeAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Checks if the given node is contained in this range.
             </summary>
             <param name="node">The node to check for.</param>
             <returns>
             True if the node is within the range, otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.GetHeadAsync">
             <summary>
             Gets the node that starts the container.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.GetStartAsync">
             <summary>
             Gets the offset of the StartContainer in the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.GetTailAsync">
             <summary>
             Gets the node that ends the container.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.GetEndAsync">
             <summary>
             Gets the offset of the EndContainer in the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.GetIsCollapsedAsync">
             <summary>
             Gets a value that indicates if the representation is collapsed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Range.GetCommonAncestorAsync">
             <summary>
             Gets the common ancestor node of the contained range.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Document">
             <summary>
             The Document interface serves as an entry point to the web page's
             content.
             </summary>
            <summary>
            The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.OpenAsync(System.String,System.String)">
             <summary>
             Causes the Document to be replaced in-place, as if it was a new
             Document object, but reusing the previous object, which is then
             returned.
             </summary>
             <param name="type">The new content type.</param>
             <param name="replace">
             Special annotation to replace the history.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CloseAsync">
             <summary>
             Finishes writing to a document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.WriteAsync(System.String)">
             <summary>
             Writes text to a document.
             </summary>
             <param name="content">
             The text to be written on the document.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.WritelnAsync(System.String)">
             <summary>
             Writes a line of text to a document.
             </summary>
             <param name="content">
             The text to be written on the document.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.LoadAsync(System.String)">
             <summary>
             Loads the document content from the given url.
             </summary>
             <param name="url">The url that hosts the content.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetElementsByNameAsync(System.String)">
             <summary>
             Returns a list of elements with a given name in the HTML document.
             </summary>
             <param name="name">
             The value of the name attribute of the element.
             </param>
             <returns>A collection of HTML elements.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetElementsByClassNameAsync(System.String)">
             <summary>
             Returns a set of elements which have all the given class names.
             </summary>
             <param name="classNames">
             A string representing the list of class names to match; class names
             are separated by whitespace.
             </param>
             <returns>A collection of elements.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetElementsByTagNameAsync(System.String)">
             <summary>
             Returns a NodeList of elements with the given tag name. The
             complete document is searched, including the root node.
             </summary>
             <param name="tagName">
             A string representing the name of the elements. The special string
             "*" represents all elements.
             </param>
             <returns>
             A collection of elements in the order they appear in the tree.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetElementsByTagNameNSAsync(System.String,System.String)">
             <summary>
             Returns a list of elements with the given tag name belonging to the
             given namespace. The complete document is searched, including the
             root node.
             </summary>
             <param name="namespaceUri">
             The namespace URI of elements to look for.
             </param>
             <param name="tagName">
             Either the local name of elements to look for or the special value
             "*", which matches all elements.
             </param>
             <returns>
             A collection of elements in the order they appear in the tree.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CreateRangeAsync">
             <summary>
             Creates a new Range object.
             </summary>
             <returns>The range.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CreateDocumentFragmentAsync">
             <summary>
             Creates an empty DocumentFragment object.
             </summary>
             <returns>The new document fragment.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CreateElementAsync(System.String)">
             <summary>
             Creates a new element with the given tag name.
             </summary>
             <param name="name">
             A string that specifies the type of element to be created.
             </param>
             <returns>The created element object.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CreateElementNSAsync(System.String,System.String)">
             <summary>
             Creates a new element with the given tag name and namespace URI.
             </summary>
             <param name="namespaceUri">
             Specifies the namespace URI to associate with the element.
             </param>
             <param name="name">
             A string that specifies the type of element to be created.
             </param>
             <returns>The created element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CreateAttributeAsync(System.String)">
             <summary>
             Creates an Attr of the given name.
             </summary>
             <param name="name">
             The name of the attribute.
             </param>
             <returns>
             A new Attr object with the nodeName attribute set to name, and
             localName, prefix, and namespaceURI set to null. The value of the
             attribute is the empty string.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CreateAttributeNSAsync(System.String,System.String)">
             <summary>
             Creates an attribute of the given qualified name and namespace URI.
             </summary>
             <param name="namespaceUri">
             The namespace URI of the attribute to create.
             </param>
             <param name="name">
             The qualified name of the attribute to instantiate.
             </param>
             <returns>A new Attr object.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.CreateTextNodeAsync(System.String)">
             <summary>
             Creates a new text node and returns it.
             </summary>
             <param name="data">
             A string containing the data to be put in the text node.
             </param>
             <returns>The created text node.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.ImportNodeAsync(WebView2.DevTools.Dom.Node,System.Boolean)">
             <summary>
             Creates a copy of a node from an external document that can be
             inserted into the current document.
             </summary>
             <param name="externalNode">
             The node from another document to be imported.
             </param>
             <param name="deep">
             Optional argument, indicating whether the descendants of the
             imported node need to be imported.
             </param>
             <returns>
             The new node that is imported into the document. The new node's
             parentNode is null, since it has not yet been inserted into the
             document tree.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.AdoptNodeAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Adopts a node from an external document. The node and its subtree
             is removed from the document it's in (if any), and its
             ownerDocument is changed to the current document. The node can then
             be inserted into the current document. The new node's parentNode is
             null, since it has not yet been inserted into the document tree.
             </summary>
             <param name="externalNode">
             The node from another document to be adopted.
             </param>
             <returns>
             The adopted node that can be used in the current document.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.HasFocusAsync">
             <summary>
             Checks if the document is currently focused.
             </summary>
             <returns>True if the document is active and in the focus.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.ExecCommandAsync(System.String,System.Boolean,System.String)">
             <summary>
             Executes a command with the provided id and the optional arguments.
             </summary>
             <param name="commandId">The id of the command to issue.</param>
             <param name="showUserInterface">Shall the UI be shown?</param>
             <param name="value">
             The argument value of the command, if any.
             </param>
             <returns>
             True if the command has been successfully executed, otherwise
             false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.QueryCommandEnabledAsync(System.String)">
             <summary>
             Checks if the command with the provided id is enabled.
             </summary>
             <param name="commandId">The id of the command to check.</param>
             <returns>
             True if the command exists and is enabled, otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.QueryCommandIndetermAsync(System.String)">
             <summary>
             Checks if the command with the provided id is currently in an
             indeterminate state.
             </summary>
             <param name="commandId">The id of the command to check.</param>
             <returns>
             True if the command exists and is neither enabled nor disabled,
             otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.QueryCommandStateAsync(System.String)">
             <summary>
             Checks if the command with the provided id has already been
             executed for the current value.
             </summary>
             <param name="commandId">The id of the command to check.</param>
             <returns>
             True if the command has been executed, otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.QueryCommandSupportedAsync(System.String)">
             <summary>
             Checks if a command with the provided id exists and is supported
             in the current context.
             </summary>
             <param name="commandId">The id of the command to check.</param>
             <returns>True if the command exists, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.QueryCommandValueAsync(System.String)">
             <summary>
             Gets the value of the document, range, or current selection, for
             the provided command.
             </summary>
             <param name="commandId">The id of the command to issue.</param>
             <returns>The modified value.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.AppendAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Appends nodes to current document.
             </summary>
             <param name="nodes">The nodes to append.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.PrependAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Prepends nodes to the current document.
             </summary>
             <param name="nodes">The nodes to prepend.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.EnableStyleSheetsForSetAsync(System.String)">
             <summary>
             Enables the stylesheets matching the specified name in the current
             style sheet set, and disables all other style sheets (except those
             without a title, which are always enabled).
             </summary>
             <param name="name">The name of the sheets to enable.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetElementByIdAsync(System.String)">
             <summary>
             Returns the Element whose ID is given by elementId. If no such
             element exists, returns null. The behavior is not defined if
             more than one element have this ID.
             </summary>
             <param name="elementId">
             A case-sensitive string representing the unique ID of the element
             being sought.
             </param>
             <returns>The matching element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetAnchorsAsync">
             <summary>
             Gets a list of all of the anchors in the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetDesignModeAsync">
             <summary>
             Gets whether the entire document is editable.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.SetDesignModeAsync(System.String)">
             <summary>
             Sets whether the entire document is editable.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetDirectionAsync">
             <summary>
             Gets the value of the dir attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.SetDirAsync(System.String)">
             <summary>
             Sets the value of the dir attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetDocumentUriAsync">
             <summary>
             Gets the URI of the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetCharacterSetAsync">
             <summary>
             Gets the character encoding of the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetCompatModeAsync">
             <summary>
             Gets a value to indicate whether the document is rendered in Quirks
             mode (BackComp) or Strict mode (CSS1Compat).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetUrlAsync">
             <summary>
             Gets a string containing the URL of the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetContentTypeAsync">
             <summary>
             Gets the Content-Type from the MIME Header of the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetDoctypeAsync">
             <summary>
             Gets the document type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetDocumentElementAsync">
             <summary>
             Gets the root element of the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetLastModifiedAsync">
             <summary>
             Gets the date of the last modification.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetLocationAsync">
             <summary>
             Gets the current location of the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetFormsAsync">
             <summary>
             Gets the forms in the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetImagesAsync">
             <summary>
             Gets the images in the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetScriptsAsync">
             <summary>
             Gets the scripts in the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetPluginsAsync">
             <summary>
             Gets a list of the embed elements within the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetCommandsAsync">
             <summary>
             Gets a list of the commands (menu item, button, and link elements)
             within the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetLinksAsync">
             <summary>
             Gets a collection of all area and anchor elements in a document
             with a value for the href attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetTitleAsync">
             <summary>
             Gets the title of the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.SetTitleAsync(System.String)">
             <summary>
             Sets the title of the document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetHeadAsync">
             <summary>
             Gets the head element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetBodyAsync">
             <summary>
             Gets the body element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.SetBodyAsync(WebView2.DevTools.Dom.HtmlElement)">
             <summary>
             Gets the body element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetCookieAsync">
             <summary>
             Gets the document cookie.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.SetCookieAsync(System.String)">
             <summary>
             Sets the document cookie.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetOriginAsync">
             <summary>
             Gets the Unicode serialization of document's origin.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetDomainAsync">
             <summary>
             Gets the domain portion of the origin of the current
             document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.SetDomainAsync(System.String)">
             <summary>
             Sets the domain portion of the origin of the current
             document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetReferrerAsync">
             <summary>
             Gets the referer to that pointed to the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetActiveElementAsync">
             <summary>
             Gets the currently focused element, that is, the element that will
             get keystroke events if the user types any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetCurrentScriptAsync">
             <summary>
             Gets the script element which is currently being processed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetDefaultViewAsync">
             <summary>
             Gets the window object associated with the document or null if none
             available.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetChildrenAsync">
             <summary>
             Gets the child elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetFirstElementChildAsync">
             <summary>
             Gets the first child element of this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetLastElementChildAsync">
             <summary>
             Gets the last child element of this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetChildElementCountAsync">
             <summary>
             Gets the number of child elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetStyleSheetsAsync">
             <summary>
             Gets a list of stylesheet objects for stylesheets explicitly linked
             into or embedded in a document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetSelectedStyleSheetSetAsync">
             <summary>
             Gets the selected set of stylesheets.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.SetSelectedStyleSheetSetAsync(System.String)">
             <summary>
             Sets the selected set of stylesheets.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetLastStyleSheetSetAsync">
             <summary>
             Gets the last stylesheet set.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetPreferredStyleSheetSetAsync">
             <summary>
             Gets the preferred stylesheet set.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Document.GetStyleSheetSetsAsync">
             <summary>
             Gets a live list of all of the currently-available style sheet
             sets.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Node">
             <summary>
             A Node is an interface from which a number of DOM types inherit, and
             allows these various types to be treated similarly.
             </summary>
            <summary>
            Node partial
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.CloneNodeAsync(System.Boolean)">
             <summary>
             Clones the node, and optionally, all of its contents.
             By default, it clones the content of the node.
             </summary>
             <param name="deep">
             Optionally: Sets if all of the content should be cloned as well.
             </param>
             <returns>The cloned node.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.IsEqualNodeAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Determines if two nodes are equal.
             </summary>
             <param name="otherNode">
             The node to be compared to the node that is executing the method.
             </param>
             <returns>
             True if the node specified in the otherNode parameter is equal to
             the current node.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.CompareDocumentPositionAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Compares the position of two nodes in a document.
             </summary>
             <param name="otherNode">
             The node to be compared to the reference node, which is the node
             executing the method.
             </param>
             <returns>The relation between the two nodes.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.NormalizeAsync">
             <summary>
             Cleans up all the text nodes under this element, i.e. merges
             adjacent and removes empty text nodes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.ContainsAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Returns true if other is an inclusive descendant of the context
             object, and false otherwise (including when other is null).
             </summary>
             <param name="otherNode">The Node to check the childs for.</param>
             <returns>
             True if the given node is contained within this Node, otherwise
             false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.IsDefaultNamespaceAsync(System.String)">
             <summary>
             Indicates whether or not a namespace is the default namespace for a
             document.
             </summary>
             <param name="namespaceUri">
             The namespace to be compared to the default namespace.
             </param>
             <returns>
             True if the given namespace URI is the default for the current
             document.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.LookupNamespaceURIAsync(System.String)">
             <summary>
             Gets the Uniform Resource Identifier (URI) of the namespace
             associated with a namespace prefix, if any.
             </summary>
             <param name="prefix">The namespace prefix.</param>
             <returns>The URI of the namespace.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.LookupPrefixAsync(System.String)">
             <summary>
             Gets the namespace prefix associated with a Uniform
             Resource Identifier (URI), if any.
             </summary>
             <param name="namespaceUri">The URI.</param>
             <returns>The namespace prefix associated with the URI.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.AppendChildAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Inserts a node as the last child node of this element.
             </summary>
             <param name="child">The node to be appended.</param>
             <returns>The appended Node.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.InsertBeforeAsync(WebView2.DevTools.Dom.Node,WebView2.DevTools.Dom.Node)">
             <summary>
             Inserts the newElement immediately before the referenceElement.
             </summary>
             <param name="newElement">The node to be inserted.</param>
             <param name="referenceElement">
             The existing child element that will succeed the new element.
             </param>
             <returns>The inserted node.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.RemoveChildAsync(WebView2.DevTools.Dom.Node)">
             <summary>
             Removes a child node from the current element, which must be a
             child of the current node.
             </summary>
             <param name="child">The child to be removed.</param>
             <returns>The removed node.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.ReplaceChildAsync(WebView2.DevTools.Dom.Node,WebView2.DevTools.Dom.Node)">
             <summary>
             Replaces one child node of the current one with the second one
             given in the parameters.
             </summary>
             <param name="newChild">The child to be inserted.</param>
             <param name="oldChild">The child to be removed.</param>
             <returns>The old node, if any.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetBaseUriAsync">
             <summary>
             Gets a string representing the base URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetNodeNameAsync">
             <summary>
             Gets a string containing the name of the Node. The structure of the
             name will differ with the name type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetChildNodesAsync">
             <summary>
             Gets a live NodeList containing all the children of this node.
             Being live means that if the children of the node change, the
             NodeList object is automatically updated.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetOwnerAsync">
             <summary>
             Gets the Document that this node belongs to. If no document is
             associated with it, returns null.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetParentElementAsync">
             <summary>
             Gets an Element that is the parent of this node. If the node has no
             parent, or if that parent is not an Element, this property returns
             null.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetParentAsync">
             <summary>
             Gets a node that is the parent of this node. If there is no such
             node, like if this node is the top of the tree or if doesn't
             participate in a tree, this property returns null.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetFirstChildAsync">
             <summary>
             Gets a Node representing the first direct child node of the node,
             or null if the node has no child.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetLastChildAsync">
             <summary>
             Gets a node representing the last direct child node of the node,
             or null if the node has no child.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetNextSiblingAsync">
             <summary>
             Gets a Node representing the next node in the tree, or null if
             there isn't such node.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetPreviousSiblingAsync">
             <summary>
             Gets a Node representing the previous node in the tree, or null if
             there isn't such node.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetNodeTypeAsync">
             <summary>
             Gets an unsigned short representing the type of the node.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetNodeValueAsync">
             <summary>
             Gets a string representing the value of an object. For most
             node types, this returns null and any set operation is ignored.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.SetNodeValueAsync(System.String)">
             <summary>
             Sets a string representing the value of an object. For most
             node types, this returns null and any set operation is ignored.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetTextContentAsync">
             <summary>
             Gets the textual content of an element and all its
             descendants.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.SetTextContentAsync(System.String)">
             <summary>
             Sets the textual content of an element and all its
             descendants.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Node.GetHasChildNodesAsync">
             <summary>
             Gets an indicator if the element has any child nodes, or not.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.StyleSheet">
             <summary>
             Represent a stylesheet for collecting style information.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheet.GetTypeAsync">
             <summary>
             Gets the style sheet language for this style sheet.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheet.GetHrefAsync">
             <summary>
             Gets the value of the attribute, which is its location. For inline
             style sheets, the value of this attribute is null.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheet.GetOwnerNodeAsync">
             <summary>
             Gets the element that associates this style sheet with the
             document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheet.GetTitleAsync">
             <summary>
             Gets the advisory title. The title is often specified in the
             ownerNode.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheet.GetMediaAsync">
             <summary>
             Gets the indented destination media for style information. The
             media is often specified in the ownerNode. If no media has been
             specified, the MediaList is empty.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheet.GetDisabledAsync">
             <summary>
             Gets if the stylesheet is applied to the document.
             Modifying this attribute may cause a new resolution of style for
             the document. If the media doesn't apply to the current user agent,
             the disabled attribute is ignored.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheet.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the stylesheet is applied to the document.
             Modifying this attribute may cause a new resolution of style for
             the document. If the media doesn't apply to the current user agent,
             the disabled attribute is ignored.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Element">
             <summary>
             The Element interface represents an object within a DOM document.
             </summary>
            <summary>
            Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit.
            It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.InsertAdjacentHtmlAsync(WebView2.DevTools.Dom.AdjacentPosition,System.String)">
             <summary>
             Inserts new HTML elements specified by the given HTML string at
             a position relative to the current element specified by the
             position.
             </summary>
             <param name="position">The relation to the current element.</param>
             <param name="html">The HTML code to generate elements for.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.HasAttributeAsync(System.String)">
             <summary>
             Returns a boolean value indicating whether the specified element
             has the specified attribute or not.
             </summary>
             <param name="name">The attributes name.</param>
             <returns>The return value of true or false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.HasAttributeNSAsync(System.String,System.String)">
             <summary>
             Returns a boolean value indicating whether the specified element
             has the specified attribute or not.
             </summary>
             <param name="namespaceUri">
             A string specifying the namespace of the attribute.
             </param>
             <param name="localName">The attributes name.</param>
             <returns>The return value of true or false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetAttributeAsync(System.String)">
             <summary>
             Returns the value of the named attribute on the specified element.
             </summary>
             <param name="name">
             The name of the attribute whose value you want to get.
             </param>
             <returns>
             If the named attribute does not exist, the value returned will be
             null, otherwise the attribute's value.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetAttributeNSAsync(System.String,System.String)">
             <summary>
             Returns the value of the named attribute on the specified element.
             </summary>
             <param name="namespaceUri">
             A string specifying the namespace of the attribute.
             </param>
             <param name="localName">
             The name of the attribute whose value you want to get.
             </param>
             <returns>
             If the named attribute does not exist, the value returned will be
             null, otherwise the attribute's value.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetAttributeAsync(System.String,System.String)">
             <summary>
             Adds a new attribute or changes the value of an existing attribute
             on the specified element.
             </summary>
             <param name="name">The name of the attribute as a string.</param>
             <param name="value">The desired new value of the attribute.</param>
             <returns>The current element.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetAttributeNSAsync(System.String,System.String,System.String)">
             <summary>
             Adds a new attribute or changes the value of an existing attribute
             on the specified element.
             </summary>
             <param name="namespaceUri">
             A string specifying the namespace of the attribute.
             </param>
             <param name="name">The name of the attribute as a string.</param>
             <param name="value">The desired new value of the attribute.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.RemoveAttributeAsync(System.String)">
             <summary>
             Removes an attribute from the specified element.
             </summary>
             <param name="name">
             Is a string that names the attribute to be removed.
             </param>
             <returns>True if an attribute was removed, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.RemoveAttributeNSAsync(System.String,System.String)">
             <summary>
             Removes an attribute from the specified element.
             </summary>
             <param name="namespaceUri">
             A string specifying the namespace of the attribute.
             </param>
             <param name="localName">
             Is a string that names the attribute to be removed.
             </param>
             <returns>True if an attribute was removed, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetElementsByClassNameAsync(System.String)">
             <summary>
             Returns a set of elements which have all the given class names.
             </summary>
             <param name="classNames">
             A string representing the list of class names to match; class names
             are separated by whitespace.
             </param>
             <returns>A collection of elements.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetElementsByTagNameAsync(System.String)">
             <summary>
             Returns a NodeList of elements with the given tag name. The
             complete document is searched, including the root node.
             </summary>
             <param name="tagName">
             A string representing the name of the elements. The special string
             "*" represents all elements.
             </param>
             <returns>
             A collection of elements in the order they appear in the tree.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetElementsByTagNameNSAsync(System.String,System.String)">
             <summary>
             Returns a list of elements with the given tag name belonging to the
             given namespace. The complete document is searched, including the
             root node.
             </summary>
             <param name="namespaceUri">
             The namespace URI of elements to look for.
             </param>
             <param name="tagName">
             Either the local name of elements to look for or the special value
             "*", which matches all elements.
             </param>
             <returns>
             A collection of elements in the order they appear in the tree.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.MatchesAsync(System.String)">
             <summary>
             Checks if the element is matched by the given selector.
             </summary>
             <param name="selectors">Represents the selector to test.</param>
             <returns>
             True if the element would be selected by the specified selector,
             otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.ClosestAsync(System.String)">
             <summary>
             Returns the closest ancestor of the current element (or the current element itself) which matches the selectors given in the parameter.
             </summary>
             <param name="selectors">Represents the selector to test.</param>
             <returns>
             The closest ancestor of the current element (or the current element itself) which matches the selectors given. If there isn't such an ancestor, it returns null.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.AttachShadowAsync(WebView2.DevTools.Dom.ShadowRootMode)">
             <summary>
             Creates a new shadow root for the current element, if there is none
             already.
             </summary>
             <param name="mode">The mode of the shadow root.</param>
             <returns>The new shadow root.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetPrefixAsync">
             <summary>
             Gets the namespace prefix of this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetLocalNameAsync">
             <summary>
             Gets the local part of the qualified name of this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetNamespaceUriAsync">
             <summary>
             Gets the namespace URI of this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetAttributesAsync">
             <summary>
             Gets the sequence of associated attributes.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetClassListAsync">
             <summary>
             Gets the list of class names.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetClassNameAsync">
             <summary>
             Gets the value of the class attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetClassNameAsync(System.String)">
             <summary>
             Sets the value of the class attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetIdAsync">
             <summary>
             Gets the id value of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetIdAsync(System.String)">
             <summary>
             Sets the id value of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetInnerHtmlAsync">
             <summary>
             Gets the inner HTML (excluding the current element) of the
             element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetInnerHtmlAsync(System.String)">
             <summary>
             Sets the inner HTML (excluding the current element) of the
             element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetOuterHtmlAsync">
             <summary>
             Gets the outer HTML (including the current element) of the
             element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetOuterHtmlAsync(System.String)">
             <summary>
             Sets the outer HTML (including the current element) of the
             element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetTagNameAsync">
             <summary>
             Gets the name of the tag that represents the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetAssignedSlotAsync">
             <summary>
             Gets the assigned slot of the current element, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetSlotAsync">
             <summary>
             Gets the value of the slot attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetSlotAsync(System.String)">
             <summary>
             Gets the value of the slot attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetShadowRootAsync">
             <summary>
             Gets the shadow root of the current element, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetChildrenAsync">
             <summary>
             Gets the child elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetFirstElementChildAsync">
             <summary>
             Gets the first child element of this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetLastElementChildAsync">
             <summary>
             Gets the last child element of this element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetChildElementCountAsync">
             <summary>
             Gets the number of child elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetNextElementSiblingAsync">
             <summary>
             Gets the Element immediately following this ChildNode in its
             parent's children list, or null if there is no Element in the list
             following this ChildNode.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetPreviousElementSiblingAsync">
             <summary>
             Gets the Element immediately prior to this ChildNode in its
             parent's children list, or null if there is no Element in the list
             prior to this ChildNode.
             </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Element.ClassName">
            <summary>
            Readonly HtmlElement ClassName e.g. HTMLScriptElement, HTMLDivElement
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Element.Description">
            <summary>
            Readonly HtmlElement Description
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SelectAsync(System.String[])">
            <summary>
            Triggers a `change` and `input` event once all the provided options have been selected.
            If there's no `select` element matching `selector`, the method throws an exception.
            </summary>
            <example>
            <code>
            <![CDATA[
            await handle.SelectAsync("blue"); // single selection
            await handle.SelectAsync("red", "green", "blue"); // multiple selections
            ]]>
            </code>
            </example>
            <param name="values">Values of options to select. If the `select` has the `multiple` attribute, all values are considered, otherwise only the first one is taken into account.</param>
            <returns>A task that resolves to an array of option values that have been successfully selected.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.EvaluateFunctionAsync(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.EvaluateFunctionAsync``1(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetAttributeAsync``1(System.String)">
            <summary>
            Get element attribute value
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="attribute">attribute</param>
            <returns>Task which resolves to the attributes value.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.SetAttributeAsync(System.String,System.Object)">
            <summary>
            Set element attribute value
            </summary>
            <param name="attribute">attribute name</param>
            <param name="value">attribute value</param>
            <returns>Task which resolves when the attribute value has been set.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.QuerySelectorAsync``1(System.String)">
            <summary>
            The method runs <c>element.querySelector</c> within the page. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <typeparam name="T">Type of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> or derived type</typeparam>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to a <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> or derived type pointing to the frame element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.QuerySelectorAsync(System.String)">
            <summary>
            The method runs <c>element.querySelector</c> within the page. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> pointing to the frame element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.QuerySelectorAllAsync``1(System.String)">
            <summary>
            Runs <c>element.querySelectorAll</c> within the page. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <typeparam name="T">Type derived from <see cref="T:WebView2.DevTools.Dom.HtmlElement"/></typeparam>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.QuerySelectorAllAsync(System.String)">
            <summary>
            Runs <c>element.querySelectorAll</c> within the page. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.QuerySelectorAllHandleAsync(System.String)">
            <summary>
            A utility function to be used with <see cref="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.JavascriptHandle},System.String,System.Object[])"/>
            </summary>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to a <see cref="T:WebView2.DevTools.Dom.JavascriptHandle"/> of <c>document.querySelectorAll</c> result</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.BeforeAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Inserts nodes just before the current node.
             </summary>
             <param name="nodes">The nodes to insert.</param>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.AfterAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Inserts nodes just after the current node.
             </summary>
             <param name="nodes">The nodes to insert.</param>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.ReplaceAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Replaces the current node with nodes.
             </summary>
             <param name="nodes">The nodes to insert.</param>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.RemoveAsync">
             <summary>
             Removes the current node.
             </summary>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.AppendAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Appends nodes to current document.
             </summary>
             <param name="nodes">The nodes to append.</param>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.PrependAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Prepends nodes to the current document.
             </summary>
             <param name="nodes">The nodes to prepend.</param>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetChildrenAsync``1">
             <summary>
             Gets the child elements.
             </summary>
             <typeparam name="T">Type</typeparam>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetFirstElementChildAsync``1">
             <summary>
             Gets the first child element of this element.
             </summary>
             <typeparam name="T">Type</typeparam>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetLastElementChildAsync``1">
             <summary>
             Gets the last child element of this element.
             </summary>
             <typeparam name="T">Type</typeparam>
             <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetNextElementSiblingAsync``1">
             <summary>
             Gets the Element immediately following this ChildNode in its
             parent's children list, or null if there is no Element in the list
             following this ChildNode.
             </summary>
             <typeparam name="T">type</typeparam>
             <returns>Element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.GetPreviousElementSiblingAsync``1">
             <summary>
             Gets the Element immediately prior to this ChildNode in its
             parent's children list, or null if there is no Element in the list
             prior to this ChildNode.
             </summary>
             <typeparam name="T">type</typeparam>
             <returns>Element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Element.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WebView2.DevTools.Dom.Attr">
             <summary>
             This type represents a DOM element's attribute as an object.
             </summary>
            <summary>
            The Attr interface represents one of an element's attributes as an object. In most situations,
            you will directly retrieve the attribute value as a string (e.g., Element.getAttribute()),
            but certain functions (e.g., Element.getAttributeNode()) or means of iterating return Attr instances.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.GetLocalNameAsync">
             <summary>
             Gets the local name of the attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.GetNameAsync">
             <summary>
             Gets the attribute's name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.GetValueAsync">
             <summary>
             Gets the attribute's value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.SetValueAsync(System.String)">
             <summary>
             Gets the attribute's value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.GetNamespaceUriAsync">
             <summary>
             Gets the namespace URL of the attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.GetPrefixAsync">
             <summary>
             Gets the prefix used by the namespace.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.GetOwnerElementAsync">
             <summary>
             Gets the owning element, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.GetIsSpecifiedAsync">
             <summary>
             Gets always true.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Attr.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WebView2.DevTools.Dom.NamedNodeMap">
             <summary>
             NamedNodeNap is a key/value pair of nodes that can be accessed by
             numeric or string index.
             https://dom.spec.whatwg.org/#interface-namednodemap
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.GetNamedItemAsync(System.String)">
             <summary>
             Gets a named item in the NamedNodeMap.
             </summary>
             <param name="name">The name of the item to get.</param>
             <returns>The attribute with the given name.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.SetNamedItemAsync(WebView2.DevTools.Dom.Attr)">
             <summary>
             Sets a named item in the NamedNodeMap.
             </summary>
             <param name="item">The named item to set.</param>
             <returns>The replaced attribute, if any.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.RemoveNamedItemAsync(System.String)">
             <summary>
             Removes a named item from the NamedNodeMap
             </summary>
             <param name="name">The named item to remove.</param>
             <returns>The removed attribute.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.GetNamedItemNSAsync(System.String,System.String)">
             <summary>
             Gets a named item in the NamedNodeMap identified by namespace and
             local name.
             </summary>
             <param name="namespaceUri">The namespace of the item.</param>
             <param name="localName">The local name of the item.</param>
             <returns>The attribute with the namespaceUri and name.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.SetNamedItemNSAsync(WebView2.DevTools.Dom.Attr)">
             <summary>
             Sets a named item in the NamedNodeMap.
             </summary>
             <param name="item">The named item to set.</param>
             <returns>The replaced attribute, if any.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.RemoveNamedItemNSAsync(System.String,System.String)">
             <summary>
             Removes a named item from the NamedNodeMap.
             </summary>
             <param name="namespaceUri">The namespace of the item.</param>
             <param name="localName">The local name of the item.</param>
             <returns>The removed attribute.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.GetLengthAsync">
             <summary>
             Gets the number of nodes in the NamedNodeMap.
             </summary>
             <returns>The number of nodes in the collection.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.NamedNodeMap.ToArrayAsync">
            <summary>
            To Array
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.TokenList">
             <summary>
             This type represents a set of space-separated tokens.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.TokenList.ContainsAsync(System.String)">
             <summary>
             Returns true if the underlying string contains a token, otherwise
             false.
             </summary>
             <param name="token">The token to search for.</param>
             <returns>The result of the search.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.TokenList.AddAsync(System.String[])">
             <summary>
             Adds some tokens to the underlying string.
             </summary>
             <param name="tokens">A list of tokens to add.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.TokenList.RemoveAsync(System.String[])">
             <summary>
             Remove some tokens from the underlying string.
             </summary>
             <param name="tokens">A list of tokens to remove.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.TokenList.ToggleAsync(System.String,System.Boolean)">
             <summary>
             Removes the specified token from string and returns false.
             If token doesn't exist it's added and the function returns true.
             </summary>
             <param name="token">The token to toggle.</param>
             <param name="force"></param>
             <returns>
             True if the token has been added, otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.TokenList.GetLengthAsync">
             <summary>
             Gets the number of contained tokens.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.TokenList.ToArrayAsync">
            <summary>
            To Array
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.StringMap">
             <summary>
             The DOMStringMap interface represents a set of name-value pairs.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StringMap.ToArrayAsync">
            <summary>
            To Array
            </summary>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.SettableTokenList">
             <summary>
             The same as TokenList, except that it allows the underlying string to
             be directly changed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.SettableTokenList.GetValueAsync">
             <summary>
             Gets the underlying string.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.SettableTokenList.SetValueAsync(System.String)">
             <summary>
             Sets the underlying string.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Text">
             <summary>
             The Text interface represents the textual content of Element or Attr.
             If an element has no markup within its content, it has a single child
             implementing Text that contains the element's text.  However, if the
             element contains markup, it is parsed into information items and Text
             nodes that form its children.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Text.SplitTextAsync(System.Int32)">
             <summary>
             Breaks the node into two nodes at a specified offset.
             </summary>
             <param name="offset">
             The point where the Node should be split.
             </param>
             <returns>
             The freshly created Text element with the rest of the content.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Text.GetTextAsync">
             <summary>
             Gets a string containing the text of all Text nodes logically
             adjacent to this Node, concatenated in document order.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Text.GetAssignedSlotAsync">
             <summary>
             Gets the assigned slot of the current text, if any.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.CharacterData">
             <summary>
             The CharacterData abstract interface represents a Node object that
             contains characters.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.SubstringDataAsync(System.Int32,System.Int32)">
             <summary>
             Returns a string containing the part of Data of the specified
             length and starting at the specified offset.
             </summary>
             <param name="offset">The point where to start.</param>
             <param name="count">The numbers of characters to copy.</param>
             <returns>
             A string that contains a subset of the characters of Data.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.AppendDataAsync(System.String)">
             <summary>
             Appends the given value to the Data string.
             </summary>
             <param name="value">The text to append.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.InsertDataAsync(System.Int32,System.String)">
             <summary>
             Inserts the specified characters, at the specified offset,
             in the Data text.
             </summary>
             <param name="offset">The offset where to insert the text.</param>
             <param name="value">The text to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.DeleteDataAsync(System.Int32,System.Int32)">
             <summary>
             Removes the specified amount of characters, starting at
             the specified offset, from the Data.
             </summary>
             <param name="offset">
             The offset, where the removal should begin.
             </param>
             <param name="count">The number of characters to remove.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.ReplaceDataAsync(System.Int32,System.Int32,System.String)">
             <summary>
             Replaces the specified amount of characters, starting at the
             specified offset, with the specified value.
             </summary>
             <param name="offset">
             The offset, where the text should be inserted.
             </param>
             <param name="count">
             The amount of characters that should be overwritten.
             </param>
             <param name="value">The value to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.BeforeAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Inserts nodes just before the current node.
             </summary>
             <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.AfterAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Inserts nodes just after the current node.
             </summary>
             <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.ReplaceAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Replaces the current node with nodes.
             </summary>
             <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.RemoveAsync">
             <summary>
             Removes the current node.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.GetDataAsync">
             <summary>
             Gets the contained text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.SetDataAsync(System.String)">
             <summary>
             Sets the contained text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.GetLengthAsync">
             <summary>
             Gets the length of the contained text.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.GetNextElementSiblingAsync">
             <summary>
             Gets the Element immediately following this ChildNode in its
             parent's children list, or null if there is no Element in the list
             following this ChildNode.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.CharacterData.GetPreviousElementSiblingAsync">
             <summary>
             Gets the Element immediately prior to this ChildNode in its
             parent's children list, or null if there is no Element in the list
             prior to this ChildNode.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Window">
             <summary>
             The interface for a browsing window element.
             https://developer.mozilla.org/en-US/docs/Web/API/Window
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.CloseAsync">
             <summary>
             Closes the window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.StopAsync">
             <summary>
             Stops the current document from being loaded.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.FocusAsync">
             <summary>
             Focuses the current window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.BlurAsync">
             <summary>
             Removes the focus from the current window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.AlertAsync(System.String)">
             <summary>
             Shows the messagebox with the given message.
             </summary>
             <param name="message">The message to display.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.ConfirmAsync(System.String)">
             <summary>
             Opens a confirmation box with the provided message.
             </summary>
             <param name="message">The message to display.</param>
             <returns>
             True if the message has been confirmed, otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.PrintAsync">
             <summary>
             Opens the print dialog for the current window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetDocumentAsync">
             <summary>
             Gets a reference to the document that the window contains.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetLocationAsync">
             <summary>
             Gets the location of the current document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetIsClosedAsync">
             <summary>
             Gets if the window has been closed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetStatusAsync">
             <summary>
             Gets the status of the window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.SetStatusAsync(System.String)">
             <summary>
             Sets the status of the window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetNameAsync">
             <summary>
             Gets the name of the window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.SetNameAsync(System.String)">
             <summary>
             Sets the name of the window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetOuterHeightAsync">
             <summary>
             Gets the height of the outside of the browser window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetOuterWidthAsync">
             <summary>
             Gets the width of the outside of the browser window.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetScreenXAsync">
             <summary>
             Gets the horizontal distance of the left border of the user's
             browser from the left side of the screen.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetScreenYAsync">
             <summary>
             Gets the vertical distance of the top border of the user's browser
             from the top side of the screen.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetProxyAsync">
             <summary>
             Gets the proxy to the current browsing context.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetNavigatorAsync">
             <summary>
             Gets the user-agent information.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Window.GetHistoryAsync">
             <summary>
             Gets the history of the current window.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Location">
             <summary>
             The Location interface represents the location of the object it is
             linked to. Changes done on it are reflected on the object it relates
             to.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Location.AssignAsync(System.String)">
             <summary>
             Loads the resource at the URL provided in parameter.
             </summary>
             <param name="url">The path to the resource.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Location.ReplaceAsync(System.String)">
             <summary>
             Replaces the current resource with the one at the provided URL. The
             difference from the assign() method is that after using replace()
             the current page will not be saved in session History, meaning the
             user won't be able to use the back button to navigate to it.
             </summary>
             <param name="url">
             The path to the resource that should replace the current resource.
             </param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Location.ReloadAsync">
             <summary>
             Reloads the resource from the current URL.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.History">
             <summary>
             The History interface allows to manipulate the browser session history,
             that is the pages visited in the tab or frame that the current page is
             loaded in.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.History.GoAsync(System.Int32)">
             <summary>
             Loads a page from the session history, identified by its relative
             location to the current page, for example -1 for the previous page
             or 1 for the next page. When integerDelta is out of bounds (e.g. -1
             when there are no previously visited pages in the session history),
             the method doesn't do anything and doesn't raise an exception.
             Calling go() without parameters or with a non-integer argument has
             no effect.
             </summary>
             <param name="delta">The number of states to surpass.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.History.BackAsync">
             <summary>
             Goes to the previous page in session history, the same action as
             when the user clicks the browser's Back button. Equivalent to
             history.go(-1).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.History.ForwardAsync">
             <summary>
             Goes to the next page in session history, the same action as when
             the user clicks the browser's Forward button; this is equivalent to
             history.go(1).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.History.PushStateAsync(System.Object,System.String,System.String)">
             <summary>
             Pushes the given data onto the session history stack with the
             specified title and, if provided, URL. The data is treated as
             opaque by the DOM.
             </summary>
             <param name="data">The data to use.</param>
             <param name="title">The title to take.</param>
             <param name="url">The URL to consider.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.History.ReplaceStateAsync(System.Object,System.String,System.String)">
             <summary>
             Updates the most recent entry on the history stack to have the
             specified data, title, and, if provided, URL. The data is treated
             as opaque by the DOM.
             </summary>
             <param name="data">The data to use.</param>
             <param name="title">The title to take.</param>
             <param name="url">The URL to consider.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.History.GetLengthAsync">
             <summary>
             Gets the number of elements in the session history, including the
             currently loaded page.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.History.GetStateAsync">
             <summary>
             Gets an any value representing the state at the top of the history
             stack.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Navigator">
             <summary>
             Represents the navigator information of a browsing context.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Navigator.GetIsOnlineAsync">
             <summary>
             Gets if the connection is established.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.UrlUtilities">
             <summary>
             The URLUtils interface defines utility methods to work with URLs.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetHrefAsync">
             <summary>
             Gets the whole URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetHrefAsync(System.String)">
             <summary>
             Sets the whole URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetProtocolAsync">
             <summary>
             Gets the protocol scheme of the URL, including the final
             ':'.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetProtocolAsync(System.String)">
             <summary>
             Sets the protocol scheme of the URL, including the final
             ':'.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetHostAsync">
             <summary>
             Gets the host, that is the hostname, a ':', and the port of
             the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetHostAsync(System.String)">
             <summary>
             Sets the host, that is the hostname, a ':', and the port of
             the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetHostNameAsync">
             <summary>
             Gets the domain of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetHostnameAsync(System.String)">
             <summary>
             Sets the domain of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetPortAsync">
             <summary>
             Gets the port number of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetPortAsync(System.String)">
             <summary>
             Sets the port number of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetPathNameAsync">
             <summary>
             Gets an initial '/' followed by the path of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetPathnameAsync(System.String)">
             <summary>
             Sets an initial '/' followed by the path of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetSearchAsync">
             <summary>
             Gets a '?' followed by the parameters of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetSearchAsync(System.String)">
             <summary>
             Sets a '?' followed by the parameters of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetHashAsync">
             <summary>
             Gets a '#' followed by the fragment identifier of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetHashAsync(System.String)">
             <summary>
             Sets a '#' followed by the fragment identifier of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetUserNameAsync">
             <summary>
             Gets the username specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetUsernameAsync(System.String)">
             <summary>
             Sets the username specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetPasswordAsync">
             <summary>
             Gets the password specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.SetPasswordAsync(System.String)">
             <summary>
             Sets the password specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.UrlUtilities.GetOriginAsync">
             <summary>
             Gets the canonical form of the origin of the specific location.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.NavigatorId">
             <summary>
             Holds the user-agent information.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.NavigatorId.GetNameAsync">
             <summary>
             Gets the name of the application.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.NavigatorId.GetVersionAsync">
             <summary>
             Gets the version of the application.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.NavigatorId.GetPlatformAsync">
             <summary>
             Gets the platform of the application.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.NavigatorId.GetUserAgentAsync">
             <summary>
             Gets the full name of the user-agent.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlAreaElement">
             <summary>
             Represents the area HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetAltAsync">
             <summary>
             Gets the alternative text for the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetAltAsync(System.String)">
             <summary>
             Sets the alternative text for the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetCoordinatesAsync">
             <summary>
             Gets the coordinates to define the hot-spot region.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetCoordsAsync(System.String)">
             <summary>
             Sets the coordinates to define the hot-spot region.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetShapeAsync">
             <summary>
             Gets the shape of the hot-spot, limited to known values.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetShapeAsync(System.String)">
             <summary>
             Sets the shape of the hot-spot, limited to known values.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetTargetAsync">
             <summary>
             Gets the browsing context in which to open the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetTargetAsync(System.String)">
             <summary>
             Sets the browsing context in which to open the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetDownloadAsync">
             <summary>
             Gets the linked resource is intended to be downloaded rather than displayed.
             The value represent the proposed name of the file. If the name is not a valid filename of the
             underlying OS, the navigator will adapt it.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetDownloadAsync(System.String)">
             <summary>
             Sets the linked resource is intended to be downloaded rather than displayed.
             The value represent the proposed name of the file. If the name is not a valid filename of the
             underlying OS, the navigator will adapt it.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetPingAsync">
             <summary>
             Gets the ping HTML attribute, as a settable list of otkens.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetRelationAsync">
             <summary>
             Gets the value indicating relationships of the
             current document to the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetRelAsync(System.String)">
             <summary>
             Sets the value indicating relationships of the
             current document to the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetRelationListAsync">
             <summary>
             Gets the value indicating relationships of the current
             document to the linked resource, as a list of tokens.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetTargetLanguageAsync">
             <summary>
             Gets the language of the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetHreflangAsync(System.String)">
             <summary>
             Sets the language of the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetTypeAsync">
             <summary>
             Gets the MIME type of the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetTypeAsync(System.String)">
             <summary>
             Sets the MIME type of the linked resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetHrefAsync">
             <summary>
             Gets the whole URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetHrefAsync(System.String)">
             <summary>
             Sets the whole URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetProtocolAsync">
             <summary>
             Gets the protocol scheme of the URL, including the final
             ':'.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetProtocolAsync(System.String)">
             <summary>
             Sets the protocol scheme of the URL, including the final
             ':'.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetHostAsync">
             <summary>
             Gets the host, that is the hostname, a ':', and the port of
             the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetHostAsync(System.String)">
             <summary>
             Sets the host, that is the hostname, a ':', and the port of
             the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetHostNameAsync">
             <summary>
             Gets the domain of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetHostnameAsync(System.String)">
             <summary>
             Sets the domain of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetPortAsync">
             <summary>
             Gets the port number of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetPortAsync(System.String)">
             <summary>
             Sets the port number of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetPathNameAsync">
             <summary>
             Gets an initial '/' followed by the path of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetPathnameAsync(System.String)">
             <summary>
             Sets an initial '/' followed by the path of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetSearchAsync">
             <summary>
             Gets a '?' followed by the parameters of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetSearchAsync(System.String)">
             <summary>
             Sets a '?' followed by the parameters of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetHashAsync">
             <summary>
             Gets a '#' followed by the fragment identifier of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetHashAsync(System.String)">
             <summary>
             Sets a '#' followed by the fragment identifier of the URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetUserNameAsync">
             <summary>
             Gets the username specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetUsernameAsync(System.String)">
             <summary>
             Sets the username specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetPasswordAsync">
             <summary>
             Gets the password specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.SetPasswordAsync(System.String)">
             <summary>
             Sets the password specified before the domain name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlAreaElement.GetOriginAsync">
             <summary>
             Gets the canonical form of the origin of the specific location.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlBaseElement">
             <summary>
             Represents the base HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlBaseElement.GetHrefAsync">
             <summary>
             Gets the hyperreference to the base URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlBaseElement.SetHrefAsync(System.String)">
             <summary>
             Sets the hyperreference to the base URL.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlBaseElement.GetTargetAsync">
             <summary>
             Gets the base target.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlBaseElement.SetTargetAsync(System.String)">
             <summary>
             Sets the base target.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlBodyElement">
             <summary>
             Represents the body HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlBreakRowElement">
             <summary>
             Represents the br HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlCommandElement">
             <summary>
             Represents the command HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.GetTypeAsync">
             <summary>
             Gets the type of command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.GetLabelAsync">
             <summary>
             Gets the assigned label.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.SetLabelAsync(System.String)">
             <summary>
             Sets the assigned label.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.GetIconAsync">
             <summary>
             Gets the icon of the command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.SetIconAsync(System.String)">
             <summary>
             Sets the icon of the command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.GetDisabledAsync">
             <summary>
             Gets if the command is disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the command is disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.GetCheckedAsync">
             <summary>
             Gets if the command is checked.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.SetCheckedAsync(System.Boolean)">
             <summary>
             Sets if the command is checked.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.GetRadioGroupAsync">
             <summary>
             Gets the id of the radio group of the command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.SetRadiogroupAsync(System.String)">
             <summary>
             Sets the id of the radio group of the command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlCommandElement.GetCommandAsync">
             <summary>
             Gets the assigned element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlDataElement">
             <summary>
             Represents the data HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDataElement.GetValueAsync">
             <summary>
             Gets the machine readable value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDataElement.SetValueAsync(System.String)">
             <summary>
             Sets the machine readable value.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlDataListElement">
             <summary>
             Represents the datalist HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDataListElement.GetOptionsAsync">
             <summary>
             Gets the associated options.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlDetailsElement">
             <summary>
             Represents the details HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDetailsElement.GetIsOpenAsync">
             <summary>
             Gets if the element is opened.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDetailsElement.SetOpenAsync(System.Boolean)">
             <summary>
             Sets if the element is opened.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlDialogElement">
             <summary>
             Repesents the dialog HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDialogElement.ShowAsync(WebView2.DevTools.Dom.Element)">
             <summary>
             Shows the dialog, optionally anchored to the element.
             </summary>
             <param name="anchor">The element, where the dialog is anchored.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDialogElement.ShowModalAsync(WebView2.DevTools.Dom.Element)">
             <summary>
             Shows the dialog modally, optionally anchored to the element.
             </summary>
             <param name="anchor">The element, where the dialog is anchored.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDialogElement.CloseAsync(System.String)">
             <summary>
             Closes the dialog.
             </summary>
             <param name="returnValue">The return value to set.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDialogElement.GetOpenAsync">
             <summary>
             Gets if the dialog is open.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDialogElement.SetOpenAsync(System.Boolean)">
             <summary>
             Sets if the dialog is open.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDialogElement.GetReturnValueAsync">
             <summary>
             Gets the return value of the dialog.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDialogElement.SetReturnValueAsync(System.String)">
             <summary>
             Sets the return value of the dialog.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlDocument">
             <summary>
             Serves as an entry point to the content of an HTML document.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDocument.QuerySelectorAsync``1(System.String)">
            <summary>
            The method runs <c>element.querySelector</c> within the page. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <typeparam name="T">Type of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> or derived type</typeparam>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to a <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> or derived type pointing to the frame element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDocument.QuerySelectorAsync(System.String)">
            <summary>
            The method runs <c>element.querySelector</c> within the page. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> pointing to the frame element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDocument.QuerySelectorAllAsync``1(System.String)">
            <summary>
            Runs <c>element.querySelectorAll</c> within the page. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <typeparam name="T">Type derived from <see cref="T:WebView2.DevTools.Dom.HtmlElement"/></typeparam>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDocument.QuerySelectorAllAsync(System.String)">
            <summary>
            Runs <c>element.querySelectorAll</c> within the page. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <param name="selector">A selector to query element for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlDocument.XPathAsync(System.String)">
            <summary>
            Evaluates the XPath expression relative to the elementHandle. If there's no such element, the method will resolve to <c>null</c>.
            </summary>
            <param name="expression">Expression to evaluate <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate"/></param>
            <returns>Task which resolves to an array of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/></returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlEmbedElement">
             <summary>
             The embed HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.GetSrcAsync">
             <summary>
             Gets the source of the object to embed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.SetSrcAsync(System.String)">
             <summary>
             Sets the source of the object to embed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.GetTypeAsync">
             <summary>
             Gets the type of the embedded object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of the embedded object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.GetWidthAsync">
             <summary>
             Gets the display width of the object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.SetWidthAsync(System.String)">
             <summary>
             Sets the display width of the object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.GetHeightAsync">
             <summary>
             Gets the display height of the object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlEmbedElement.SetHeightAsync(System.String)">
             <summary>
             Sets the display height of the object.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlFieldSetElement">
             <summary>
             Represents the fieldset HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetDisabledAsync">
             <summary>
             Gets if the element is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the element is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetNameAsync">
             <summary>
             Gets the value of the name attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.SetNameAsync(System.String)">
             <summary>
             Sets the value of the name attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetTypeAsync">
             <summary>
             Gets the type of input control (fieldset).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetElementsAsync">
             <summary>
             Gets the elements belonging to this field set.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlFieldSetElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlFormControlsCollection">
             <summary>
             Represents a collection of HTML form controls.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlHeadElement">
             <summary>
             Represents the head HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlHeadingElement">
             <summary>
             Represents the heading HTML element(s).
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlHrElement">
             <summary>
             Represents the hr HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlHtmlElement">
             <summary>
             Represents the html HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlHtmlElement.GetManifestAsync">
             <summary>
             Gets the value of the manifest attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlHtmlElement.SetManifestAsync(System.String)">
             <summary>
             Sets the value of the manifest attribute.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlInlineFrameElement">
             <summary>
             Represents the iframe HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetSrcAsync">
             <summary>
             Gets the frame source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetSrcAsync(System.String)">
             <summary>
             Sets the frame source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetContentHtmlAsync">
             <summary>
             Gets the content of the page that the nested browsing context is to contain.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetSrcdocAsync(System.String)">
             <summary>
             Gets the content of the page that the nested browsing context is to contain.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetNameAsync">
             <summary>
             Gets the name of the frame.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the frame.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetSandboxAsync">
             <summary>
             Gets the tokens of the sandbox attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetIsSeamlessAsync">
             <summary>
             Gets if the seamless attribute has been set.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetSeamlessAsync(System.Boolean)">
             <summary>
             Sets if the seamless attribute has been set.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetIsFullscreenAllowedAsync">
             <summary>
             Gets if the frame's content can trigger the fullscreen mode.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetAllowFullscreenAsync(System.Boolean)">
             <summary>
             Sets if the frame's content can trigger the fullscreen mode.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetIsPaymentRequestAllowedAsync">
             <summary>
             Gets if the frame's content can trigger a payment request.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetAllowPaymentRequestAsync(System.Boolean)">
             <summary>
             Sets if the frame's content can trigger a payment request.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetReferrerPolicyAsync">
             <summary>
             Gets the frame's referrer policy.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetReferrerPolicyAsync(System.String)">
             <summary>
             Sets the frame's referrer policy.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetWidthAsync">
             <summary>
             Gets the display width of the frame.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetWidthAsync(System.Int32)">
             <summary>
             Sets the display width of the frame.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetHeightAsync">
             <summary>
             Gets the display height of the frame.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.SetHeightAsync(System.Int32)">
             <summary>
             Sets the display height of the frame.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetContentDocumentAsync">
             <summary>
             Gets the document this frame contains, if there is any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlInlineFrameElement.GetContentWindowAsync">
             <summary>
             Gets the frame's parent's window context.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlKeygenElement">
             <summary>
             Represents the keygen HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetAutofocusAsync">
             <summary>
             Gets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.SetAutofocusAsync(System.Boolean)">
             <summary>
             Sets the autofocus HTML attribute, which indicates whether the
             control should have input focus when the page loads.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetDisabledAsync">
             <summary>
             Gets if the keygen is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the keygen is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetNameAsync">
             <summary>
             Gets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetTypeAsync">
             <summary>
             Gets the type of input control (keygen).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetKeyEncryptionAsync">
             <summary>
             Gets the type of encryption used.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.SetKeytypeAsync(System.String)">
             <summary>
             Sets the type of encryption used.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetChallengeAsync">
             <summary>
             Gets the challenge attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.SetChallengeAsync(System.String)">
             <summary>
             Sets the challenge attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlKeygenElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlLabelElement">
             <summary>
             Represents the label HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLabelElement.GetFormAsync">
             <summary>
             Gets the form element that the label is assigned for, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLabelElement.GetHtmlForAsync">
             <summary>
             Gets the ID of the labeled control. Reflects the for attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLabelElement.SetHtmlForAsync(System.String)">
             <summary>
             Sets the ID of the labeled control. Reflects the for attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLabelElement.GetControlAsync">
             <summary>
             Gets the control that the label is assigned for, if any.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlLegendElement">
             <summary>
             Represents the legend HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlLegendElement.GetFormAsync">
             <summary>
             Gets the associated form element, if any.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlListItemElement">
             <summary>
             Represents the li HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlListItemElement.GetValueAsync">
             <summary>
             Gets the value in an ordered list.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlListItemElement.SetValueAsync(System.Nullable{System.Int32})">
             <summary>
             Sets the value in an ordered list.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlMapElement">
             <summary>
             Represents the map HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMapElement.GetNameAsync">
             <summary>
             Gets the name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMapElement.SetNameAsync(System.String)">
             <summary>
             Sets the name.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMapElement.GetAreasAsync">
             <summary>
             Gets a collection representing the area elements
             associated to this map.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMapElement.GetImagesAsync">
             <summary>
             Gets a collection representing the img and object
             elements associated to this element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlMarqueeElement">
             <summary>
             Used to declare properties for the marquee element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMarqueeElement.GetScrollAmountAsync">
             <summary>
             Gets the amount of scrolling in pixels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMarqueeElement.SetScrollamountAsync(System.Int32)">
             <summary>
             Sets the amount of scrolling in pixels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMarqueeElement.GetScrollDelayAsync">
             <summary>
             Gets the delay of scrolling in ms.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMarqueeElement.SetScrolldelayAsync(System.Int32)">
             <summary>
             Sets the delay of scrolling in ms.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMarqueeElement.GetLoopAsync">
             <summary>
             Gets the loop number.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMarqueeElement.SetLoopAsync(System.Int32)">
             <summary>
             Sets the loop number.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlMenuElement">
             <summary>
             Represents the menu HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuElement.GetLabelAsync">
             <summary>
             Gets the text label of the menu element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuElement.SetLabelAsync(System.String)">
             <summary>
             Sets the text label of the menu element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuElement.GetTypeAsync">
             <summary>
             Gets the type of the menu element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of the menu element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlMenuItemElement">
             <summary>
             Represents the menuitem HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetCommandAsync">
             <summary>
             Gets the assigned master command, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetTypeAsync">
             <summary>
             Gets the type of command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetLabelAsync">
             <summary>
             Gets the user-visible label.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.SetLabelAsync(System.String)">
             <summary>
             Sets the user-visible label.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetIconAsync">
             <summary>
             Gets the icon for the command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.SetIconAsync(System.String)">
             <summary>
             Sets the icon for the command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetDisabledAsync">
             <summary>
             Gets if the menuitem element is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the menuitem element is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetCheckedAsync">
             <summary>
             Gets if the menuitem element is checked or not.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.SetCheckedAsync(System.Boolean)">
             <summary>
             Sets if the menuitem element is checked or not.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetIsDefaultAsync">
             <summary>
             Gets if the menuitem element is the default command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.SetDefaultAsync(System.Boolean)">
             <summary>
             Sets if the menuitem element is the default command.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.GetRadioGroupAsync">
             <summary>
             Gets the name of group of commands to
             treat as a radio button group.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMenuItemElement.SetRadiogroupAsync(System.String)">
             <summary>
             Sets the name of group of commands to
             treat as a radio button group.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlMetaElement">
             <summary>
             Represents the meta HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMetaElement.GetNameAsync">
             <summary>
             Gets the name of the meta element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMetaElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the meta element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMetaElement.GetHttpEquivalentAsync">
             <summary>
             Gets the value of the equivalent in a meta element, which
             is effective if the server doesn't send a corresponding real header.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMetaElement.SetHttpEquivAsync(System.String)">
             <summary>
             Sets the value of the equivalent in a meta element, which
             is effective if the server doesn't send a corresponding real header.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMetaElement.GetContentAsync">
             <summary>
             Gets the value of the content attribute of the meta element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMetaElement.SetContentAsync(System.String)">
             <summary>
             Sets the value of the content attribute of the meta element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlMeterElement">
             <summary>
             Represents the meter HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.GetValueAsync">
             <summary>
             Gets the current value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.SetValueAsync(System.Double)">
             <summary>
             Sets the current value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.GetMinimumAsync">
             <summary>
             Gets the minimum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.SetMinAsync(System.Double)">
             <summary>
             Sets the minimum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.GetMaximumAsync">
             <summary>
             Gets the maximum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.SetMaxAsync(System.Double)">
             <summary>
             Sets the maximum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.GetLowAsync">
             <summary>
             Gets the low value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.SetLowAsync(System.Double)">
             <summary>
             Sets the low value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.GetHighAsync">
             <summary>
             Gets the high value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.SetHighAsync(System.Double)">
             <summary>
             Sets the high value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.GetOptimumAsync">
             <summary>
             Gets the optimum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.SetOptimumAsync(System.Double)">
             <summary>
             Sets the optimum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlMeterElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlModElement">
             <summary>
             Represents the mod HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlModElement.GetCitationAsync">
             <summary>
             Gets the cite HTML attribute, containing a URI of a
             resource explaining the change.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlModElement.SetCiteAsync(System.String)">
             <summary>
             Gets the cite HTML attribute, containing a URI of a
             resource explaining the change.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlModElement.GetDateTimeAsync">
             <summary>
             Gets the datetime HTML attribute, containing a date-and-time
             string representing a timestamp for the change.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlModElement.SetDatetimeAsync(System.String)">
             <summary>
             Gets the datetime HTML attribute, containing a date-and-time
             string representing a timestamp for the change.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlObjectElement">
             <summary>
             Represents the object HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetSrcAsync">
             <summary>
             Gets the address of the resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetDataAsync(System.String)">
             <summary>
             Sets the address of the resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetTypeAsync">
             <summary>
             Gets the type of the resource. If present,
             the attribute must be a valid MIME type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of the resource. If present,
             the attribute must be a valid MIME type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetTypeMustMatchAsync">
             <summary>
             Gets an attribute whose presence indicates that the resource specified by the data
             attribute is only to be used if the value of the type attribute and the Content-Type of the
             aforementioned resource match.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetTypeMustMatchAsync(System.Boolean)">
             <summary>
             Sets an attribute whose presence indicates that the resource specified by the data
             attribute is only to be used if the value of the type attribute and the Content-Type of the
             aforementioned resource match.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetNameAsync">
             <summary>
             Gets the name of the object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the object.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetUseMapAsync">
             <summary>
             Gets the associated image map of the object if the object element represents an image.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetUseMapAsync(System.String)">
             <summary>
             Sets the associated image map of the object if the object element represents an image.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetWidthAsync">
             <summary>
             Gets the display width of the object element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetWidthAsync(System.Int32)">
             <summary>
             Sets the display width of the object element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetHeightAsync">
             <summary>
             Gets the display height of the object element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.SetHeightAsync(System.Int32)">
             <summary>
             Sets the display height of the object element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetContentDocumentAsync">
             <summary>
             Gets the active document of the object element's nested browsing context, if it has one;
             otherwise returns null.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetContentWindowAsync">
             <summary>
             Gets the object element's nested browsing context, if it has one; otherwise returns null.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlObjectElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlOptionsCollection">
             <summary>
             Represents a collection of HTML option elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsCollection.AddAsync(WebView2.DevTools.Dom.HtmlOptionElement,WebView2.DevTools.Dom.HtmlElement)">
             <summary>
             Adds an option element to the collection.
             </summary>
             <param name="element">The element to add.</param>
             <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsCollection.AddAsync(WebView2.DevTools.Dom.HtmlOptionsGroupElement,WebView2.DevTools.Dom.HtmlElement)">
             <summary>
             Adds an options group element to the collection.
             </summary>
             <param name="element">The element to add.</param>
             <param name="before">The optional reference element for inserting.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsCollection.RemoveAsync(System.Int32)">
             <summary>
             Removes an element from the collection.
             </summary>
             <param name="index">The index of the element of remove.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsCollection.GetSelectedIndexAsync">
             <summary>
             Gets the selected index.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsCollection.SetSelectedIndexAsync(System.Int32)">
             <summary>
             Sets the selected index.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlOptionsGroupElement">
             <summary>
             Represents the optgroup HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsGroupElement.GetDisabledAsync">
             <summary>
             Gets if the optgroup is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsGroupElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the optgroup is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsGroupElement.GetLabelAsync">
             <summary>
             Gets the label.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOptionsGroupElement.SetLabelAsync(System.String)">
             <summary>
             Sets the label.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlOrderedListElement">
             <summary>
             Represents the ol HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOrderedListElement.GetIsReversedAsync">
             <summary>
             Gets if the order is reversed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOrderedListElement.SetReversedAsync(System.Boolean)">
             <summary>
             Sets if the order is reversed.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOrderedListElement.GetStartAsync">
             <summary>
             Gets the lowest number.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOrderedListElement.SetStartAsync(System.Int32)">
             <summary>
             Sets the lowest number.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOrderedListElement.GetTypeAsync">
             <summary>
             Gets the type of enumeration.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOrderedListElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of enumeration.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlOutputElement">
             <summary>
             Represents the output HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.CheckValidityAsync">
             <summary>
             Checks the validity of the current element.
             </summary>
             <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.SetCustomValidityAsync(System.String)">
             <summary>
             Sets a custom validation error. If this is not the empty string,
             then the element is suffering from a custom validation error.
             </summary>
             <param name="error">The error message to use.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetHtmlForAsync">
             <summary>
             Gets the IDs of the input elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetDefaultValueAsync">
             <summary>
             Gets the default value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.SetDefaultValueAsync(System.String)">
             <summary>
             Sets the default value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetValueAsync">
             <summary>
             Gets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.SetValueAsync(System.String)">
             <summary>
             Sets the value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetTypeAsync">
             <summary>
             Gets the type of input control (output).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetFormAsync">
             <summary>
             Gets the associated HTML form element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetNameAsync">
             <summary>
             Gets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetWillValidateAsync">
             <summary>
             Gets a value if the current element validates.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetValidityAsync">
             <summary>
             Gets the current validation state of the current element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlOutputElement.GetValidationMessageAsync">
             <summary>
             Gets the current validation message.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlParamElement">
             <summary>
             Represents the param HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlParamElement.GetNameAsync">
             <summary>
             Gets the name of the parameter.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlParamElement.SetNameAsync(System.String)">
             <summary>
             Sets the name of the parameter.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlParamElement.GetValueAsync">
             <summary>
             Gets the value of the parameter.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlParamElement.SetValueAsync(System.String)">
             <summary>
             Sets the value of the parameter.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlPictureElement">
             <summary>
             Represents the HTML picture element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlPreElement">
             <summary>
             Represents the pre HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlProgressElement">
             <summary>
             Represents the progress HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlProgressElement.GetValueAsync">
             <summary>
             Gets the current value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlProgressElement.SetValueAsync(System.Double)">
             <summary>
             Sets the current value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlProgressElement.GetMaximumAsync">
             <summary>
             Gets the maximum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlProgressElement.SetMaxAsync(System.Double)">
             <summary>
             Sets the maximum value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlProgressElement.GetPositionAsync">
             <summary>
             Gets the position.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlProgressElement.GetLabelsAsync">
             <summary>
             Gets the list of assigned labels.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlQuoteElement">
             <summary>
             Represents the q HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlQuoteElement.GetCitationAsync">
             <summary>
             Gets the citation of the element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlQuoteElement.SetCiteAsync(System.String)">
             <summary>
             Sets the citation of the element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlScriptElement">
             <summary>
             Represents the script HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetSrcAsync">
             <summary>
             Gets the source URL of the script.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetSrcAsync(System.String)">
             <summary>
             Sets the source URL of the script.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetIsAsyncAsync">
             <summary>
             Gets if the script should be run asynchronously.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetAsyncAsync(System.Boolean)">
             <summary>
             Sets if the script should be run asynchronously.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetIsDeferredAsync">
             <summary>
             Gets if script execution should be deferred.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetDeferAsync(System.Boolean)">
             <summary>
             Sets if script execution should be deferred.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetTypeAsync">
             <summary>
             Gets the type of script.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of script.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetCharacterSetAsync">
             <summary>
             Gets the character set of the script.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetCharsetAsync(System.String)">
             <summary>
             Sets the character set of the script.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetCrossOriginAsync">
             <summary>
             Gets the cross-origin attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetCrossOriginAsync(System.String)">
             <summary>
             Sets the cross-origin attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetTextAsync">
             <summary>
             Gets the script's source code.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetTextAsync(System.String)">
             <summary>
             Sets the script's source code.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.GetIntegrityAsync">
             <summary>
             Gets the linked source's integrity, if any.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlScriptElement.SetIntegrityAsync(System.String)">
             <summary>
             Sets the linked source's integrity, if any.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlSourceElement">
             <summary>
             Represents the source HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.GetSrcAsync">
             <summary>
             Gets the URL for a media resource. Is ignored when used for
             the picture element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.SetSrcAsync(System.String)">
             <summary>
             Sets the URL for a media resource. Is ignored when used for
             the picture element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.GetSourceSetAsync">
             <summary>
             Gets the URL of a picture element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.SetSrcsetAsync(System.String)">
             <summary>
             Sets the URL of a picture element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.GetSizesAsync">
             <summary>
             Gets the sizes if used in conjunction with a picture.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.SetSizesAsync(System.String)">
             <summary>
             Sets the sizes if used in conjunction with a picture.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.GetTypeAsync">
             <summary>
             Gets the type of the media source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.SetTypeAsync(System.String)">
             <summary>
             Sets the type of the media source.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.GetMediaAsync">
             <summary>
             Gets the intended type of the media resource.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlSourceElement.SetMediaAsync(System.String)">
             <summary>
             Sets the intended type of the media resource.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlStyleElement">
             <summary>
             Represents a style HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.GetDisabledAsync">
             <summary>
             Gets if the style is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.SetDisabledAsync(System.Boolean)">
             <summary>
             Sets if the style is enabled or disabled.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.GetMediaAsync">
             <summary>
             Gets the use with one or more target media.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.SetMediaAsync(System.String)">
             <summary>
             Sets the use with one or more target media.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.GetTypeAsync">
             <summary>
             Gets the content type of the style sheet language.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.SetTypeAsync(System.String)">
             <summary>
             Sets the content type of the style sheet language.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.GetIsScopedAsync">
             <summary>
             Gets if the style is scoped.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.SetScopedAsync(System.Boolean)">
             <summary>
             Sets if the style is scoped.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlStyleElement.GetSheetAsync">
             <summary>
             Gets the StyleSheet object associated with the given element, or
             null if there is none.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTableCaptionElement">
             <summary>
             Represents the caption HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTableColumnElement">
             <summary>
             Represents the col HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableColumnElement.GetSpanAsync">
             <summary>
             Gets the number of columns in a group or affected by a grouping.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTableColumnElement.SetSpanAsync(System.Int32)">
             <summary>
             Sets the number of columns in a group or affected by a grouping.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTableDataCellElement">
             <summary>
             Represents the td HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTemplateElement">
             <summary>
             Represents the template HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTemplateElement.GetContentAsync">
             <summary>
             Gets the template's content for cloning.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTimeElement">
             <summary>
             Represents the time HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTimeElement.GetDateTimeAsync">
             <summary>
             Gets the time.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTimeElement.SetDatetimeAsync(System.String)">
             <summary>
             Sets the time.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlTitleElement">
             <summary>
             Represents the title HTML element.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTitleElement.GetTextAsync">
             <summary>
             Gets the text of the title.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.HtmlTitleElement.SetTextAsync(System.String)">
             <summary>
             Sets the text of the title.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlUnknownElement">
             <summary>
             Represents an unknown HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.HtmlUnorderedListElement">
             <summary>
             Represents an ul HTML element.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.ValidityState">
             <summary>
             The ValidityState interface represents the validity states that an element
             can be in, with respect to constraint validation. Together, they help explain
             why an element's value fails to validate, if it's not valid.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsValueMissingAsync">
             <summary>
             Gets if the element has a required attribute, but no value.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsTypeMismatchAsync">
             <summary>
             Gets if the value is not in the required syntax (when type is email or url).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsPatternMismatchAsync">
             <summary>
             Gets if the value does not match the specified pattern.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsTooLongAsync">
             <summary>
             Gets if the value exceeds the specified maxlength.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsTooShortAsync">
             <summary>
             Gets if the value is below the specified minlength.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsBadInputAsync">
             <summary>
             Gets if the value is regarded is invalid input.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsRangeUnderflowAsync">
             <summary>
             Gets if the value is less than the minimum specified by the min attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsRangeOverflowAsync">
             <summary>
             Gets if the value is greater than the maximum specified by the max attribute.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsStepMismatchAsync">
             <summary>
             Gets if the value does not fit the rules determined by the step attribute
             (that is, it's not evenly divisible by the step value).
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsCustomErrorAsync">
             <summary>
             Gets the element's custom validity message.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ValidityState.GetIsValidAsync">
             <summary>
             Gets if the element meets all constraint validations, and is therefore
             considered to be valid.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.MediaList">
             <summary>
             A collection of media queries.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.MediaList.AppendMediumAsync(System.String)">
             <summary>
             Adds the medium to the end of the list. If the medium is already used,
             it is first removed.
             </summary>
             <param name="medium">The new medium to add.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.MediaList.RemoveMediumAsync(System.String)">
             <summary>
             Deletes the medium indicated from the list of media queries.
             </summary>
             <param name="medium">The medium to delete from the list.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.MediaList.GetMediaTextAsync">
             <summary>
             Gets the parsable textual representation of the media list.
             This is a comma-separated list of media.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.MediaList.SetMediaTextAsync(System.String)">
             <summary>
             Sets the parsable textual representation of the media list.
             This is a comma-separated list of media.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.MediaList.GetLengthAsync">
             <summary>
             Gets the number of media in the list.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.StyleSheetList">
             <summary>
             Represents a list of stylesheet elements.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StyleSheetList.GetLengthAsync">
             <summary>
             Gets the number of elements in the list of stylesheets.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.StringList">
             <summary>
             Represents a string list.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.StringList.ContainsAsync(System.String)">
             <summary>
             Returns a boolean indicating if the specified entry is available.
             </summary>
             <param name="entry">The entry that will be looked for.</param>
             <returns>
             True if the element is available, otherwise false.
             </returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.StringList.GetLengthAsync">
             <summary>
             Gets the number of entries.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.DocumentType">
             <summary>
             The DocumentType interface represents a Node containing a doctype.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.DocumentType.BeforeAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Inserts nodes just before the current node.
             </summary>
             <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.DocumentType.AfterAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Inserts nodes just after the current node.
             </summary>
             <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.DocumentType.ReplaceAsync(WebView2.DevTools.Dom.Node[])">
             <summary>
             Replaces the current node with nodes.
             </summary>
             <param name="nodes">The nodes to insert.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.DocumentType.RemoveAsync">
             <summary>
             Removes the current node.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.DocumentType.GetNameAsync">
             <summary>
             Gets the name of the document type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.DocumentType.GetPublicIdentifierAsync">
             <summary>
             Gets the public ID of the document type.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.DocumentType.GetSystemIdentifierAsync">
             <summary>
             Gets the system ID of the document type.
             </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.ShadowRoot">
            <summary>
            The ShadowRoot interface represents the shadow root.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.DocumentFragment">
            <summary>
            The DocumentFragment interface represents a minimal document object
            that has no parent.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Emulate">
            <summary>
            Device Emulation
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Emulate.Device(WebView2.DevTools.Dom.Mobile.DeviceName)">
             <summary>
             Returns a <see cref="T:WebView2.DevTools.Dom.Mobile.DeviceDescriptor"/>  for the given name
             </summary>
             <param name="name">Device Name</param>
             <returns>Device Device Descriptor</returns>
             <example>
             <code>
            <![CDATA[
             var iPhone = Emulate.Device(DeviceDescriptorName.IPhone6);
             await devToolsContext.EmulateAsync(iPhone);
             ]]>
             </code>
             </example>
        </member>
        <member name="T:WebView2.DevTools.Dom.ErrorEventArgs">
            <summary>
            <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.Error"/> arguments.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.ErrorEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.ErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.ErrorEventArgs"/> class.
            </summary>
            <param name="error">Error.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.ExecutionContext">
            <summary>
            The class represents a context for JavaScript execution. Examples of JavaScript contexts are:
            Each <see cref="P:WebView2.DevTools.Dom.ExecutionContext.Frame"/> has a separate <see cref="T:WebView2.DevTools.Dom.ExecutionContext"/>
            All kind of web workers have their own contexts
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.ExecutionContext.Id">
            <summary>
            Execution Context Id
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.ExecutionContext.Frame">
            <summary>
            Frame associated with this execution context.
            </summary>
            <remarks>
            NOTE Not every execution context is associated with a frame. For example, workers and extensions have execution contexts that are not associated with frames.
            </remarks>
        </member>
        <member name="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionAsync(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
            <seealso cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionHandleAsync``1(System.String)"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionAsync``1(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
            <seealso cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionHandleAsync``1(System.String)"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.JavascriptHandle"/> instances can be passed as arguments
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionAsync``1(System.String)"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync``1(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.JavascriptHandle"/> instances can be passed as arguments
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionAsync``1(System.String)"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.ExecutionContext.QueryObjectsAsync(WebView2.DevTools.Dom.JavascriptHandle)">
            <summary>
            The method iterates JavaScript heap and finds all the objects with the given prototype.
            </summary>
            <returns>A task which resolves to a handle to an array of objects with this prototype.</returns>
            <param name="prototypeHandle">A handle to the object prototype.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.FileChooserOpenedEventArgs">
            <summary>
            FileChooserOpenedEventArgs used in conjunction with <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FileChooserOpened"/>
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.FileChooserOpenedEventArgs.Element">
            <summary>
            <see cref="T:WebView2.DevTools.Dom.HtmlInputElement"/> that triggered the file chooser dialog.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.FileChooserOpenedEventArgs.Multiple">
            <summary>
            Does the input element support multiple files
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Frame">
             <summary>
             Provides methods to interact with a single page frame in Chromium. One <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/> instance might have multiple <see cref="T:WebView2.DevTools.Dom.Frame"/> instances.
             At every point of time, page exposes its current frame tree via the <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.MainFrame"/> and <see cref="P:WebView2.DevTools.Dom.Frame.ChildFrames"/> properties.
            
             <see cref="T:WebView2.DevTools.Dom.Frame"/> object's lifecycle is controlled by three events, dispatched on the page object
             - <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameAttached"/> - fires when the frame gets attached to the page. A Frame can be attached to the page only once
             - <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameNavigated"/> - fired when the frame commits navigation to a different URL
             - <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameDetached"/> - fired when the frame gets detached from the page.  A Frame can be detached from the page only once
             </summary>
             <example>
             An example of dumping frame tree
             <code>
             <![CDATA[
             var ctx = await corewWebView.CreateDevToolsContextAsync();
             await ctx.GoToAsync("https://www.google.com/chrome/browser/canary.html");
             dumpFrameTree(ctx.MainFrame, string.Empty);
            
             void dumpFrameTree(Frame frame, string indent)
             {
                 Console.WriteLine(indent + frame.Url);
                 foreach (var child in frame.ChildFrames)
                 {
                     dumpFrameTree(child, indent + "  ");
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:WebView2.DevTools.Dom.Frame.Id">
            <summary>
            Frame Id
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Frame.IsMainFrame">
            <summary>
            returns true if Main Frame otherwise false.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Frame.ChildFrames">
            <summary>
            Gets the child frames of the this frame
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Frame.Name">
            <summary>
            Gets the frame's name attribute as specified in the tag
            If the name is empty, returns the id attribute instead
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Frame.Url">
            <summary>
            Gets the frame's url
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Frame.Detached">
            <summary>
            Gets a value indicating if the frame is detached or not
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Frame.ParentFrame">
            <summary>
            Gets the parent frame, if any. Detached frames and main frames return <c>null</c>
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.SetContentAsync(System.String)">
            <summary>
            Sets the HTML markup to the page
            </summary>
            <param name="html">HTML markup to assign to the page.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.GetContentAsync">
            <summary>
            Gets the full HTML contents of the page, including the doctype.
            </summary>
            <returns>Task which resolves to the HTML content.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.GetContentAsync"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.EvaluateExpressionAsync(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>Task which resolves to script return value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionAsync``1(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.EvaluateExpressionAsync``1(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>Task which resolves to script return value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionAsync``1(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.EvaluateFunctionAsync(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.EvaluateExpressionAsync``1(System.String)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.EvaluateFunctionAsync``1(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.EvaluateExpressionAsync``1(System.String)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.EvaluateExpressionHandleAsync(System.String)">
            <summary>
            Passes an expression to the <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionHandleAsync``1(System.String)"/>, returns a <see cref="T:System.Threading.Tasks.Task"/>, then <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateExpressionHandleAsync``1(System.String)"/> would wait for the <see cref="T:System.Threading.Tasks.Task"/> to resolve and return its value.
            </summary>
            <example>
            <code>
            <![CDATA[
            var frame = devToolsContext.MainFrame;
            var handle = await frame.EvaluateExpressionHandleAsync("1 + 2");
            ]]>
            </code>
            </example>
            <returns>Resolves to the return value of <paramref name="script"/></returns>
            <param name="script">Expression to be evaluated in the <seealso cref="T:WebView2.DevTools.Dom.ExecutionContext"/></param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.EvaluateFunctionHandleAsync(System.String,System.Object[])">
            <summary>
            Passes a function to the <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync(System.String,System.Object[])"/>, returns a <see cref="T:System.Threading.Tasks.Task"/>, then <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionHandleAsync``1(System.String,System.Object[])"/> would wait for the <see cref="T:System.Threading.Tasks.Task"/> to resolve and return its value.
            </summary>
            <example>
            Get a handle to the Global Object
            <code>
            <![CDATA[
            var frame = devToolsContext.MainFrame;
            var handle = frame.EvaluateFunctionHandleAsync("() => Promise.resolve(self)");
            return handle; // Handle for the global object.
            ]]>
            </code>
            Example of passing a <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> as a param to a javascript function.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments to the <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync(System.String,System.Object[])"/>:
            <code>
            <![CDATA[
            const handle = await devToolsContext.EvaluateExpressionHandleAsync("document.body");
            const resultHandle = await devToolsContext.EvaluateFunctionHandleAsync("body => body.innerHTML", handle);
            return await resultHandle.GetInnerHtmlAsync(); // gets body's innerHTML
            ]]>
            </code>
            </example>
            <param name="function">Function to be evaluated in the <see cref="T:WebView2.DevTools.Dom.ExecutionContext"/></param>
            <param name="args">Arguments to pass to <paramref name="function"/></param>
            <returns>Resolves to the return value of <paramref name="function"/></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.EvaluateFunctionHandleAsync``1(System.String,System.Object[])">
             <summary>
             Passes a function to the <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync(System.String,System.Object[])"/>, returns a <see cref="T:System.Threading.Tasks.Task"/>, then <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionHandleAsync``1(System.String,System.Object[])"/> would wait for the <see cref="T:System.Threading.Tasks.Task"/> to resolve and return its value.
             </summary>
             <example>
             <code>
             var frame = page.MainFrame;
             const handle = Page.MainFrame.EvaluateFunctionHandleAsync("() => Promise.resolve(self)");
             return handle; // Handle for the global object.
             </code>
             <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments to the <see cref="M:WebView2.DevTools.Dom.ExecutionContext.EvaluateFunctionAsync(System.String,System.Object[])"/>:
            
             const handle = await Page.MainFrame.EvaluateExpressionHandleAsync("document.body");
             const resultHandle = await Page.MainFrame.EvaluateFunctionHandleAsync("body => body.innerHTML", handle);
             return await resultHandle.JsonValueAsync(); // prints body's innerHTML
             </example>
             <typeparam name="T">Type</typeparam>
             <param name="function">Function to be evaluated in the <see cref="T:WebView2.DevTools.Dom.ExecutionContext"/></param>
             <param name="args">Arguments to pass to <paramref name="function"/></param>
             <returns>Resolves to the return value of <paramref name="function"/></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.GetExecutionContextAsync">
            <summary>
            Gets the <see cref="T:WebView2.DevTools.Dom.ExecutionContext"/> associated with the frame.
            </summary>
            <returns><see cref="T:WebView2.DevTools.Dom.ExecutionContext"/> associated with the frame.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a selector to be added to the DOM
            </summary>
            <param name="selector">A selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task that resolves when element specified by selector string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <exception cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">If timeout occurred.</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.WaitForSelectorAsync``1(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a selector to be added to the DOM
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="selector">A selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task that resolves when element specified by selector string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <exception cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">If timeout occurred.</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a selector to be added to the DOM
            </summary>
            <param name="xpath">A xpath selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task which resolves when element specified by xpath string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and xpath is not found in DOM.</returns>
            <example>
            <code>
            <![CDATA[
            var ctx = await corewWebView.CreateDevToolsContextAsync();
            string currentURL = null;
            ctx.MainFrame
                .WaitForXPathAsync("//img")
                .ContinueWith(_ => Console.WriteLine("First URL with image: " + currentURL));
            foreach (var current in new[] { "https://example.com", "https://google.com", "https://bbc.com" })
            {
                currentURL = current;
                await ctx.GoToAsync(currentURL);
            }
            ]]>
            </code>
            </example>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForXPathAsync``1(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <exception cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">If timeout occurred.</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.WaitForXPathAsync``1(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a selector to be added to the DOM
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="xpath">A xpath selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task which resolves when element specified by xpath string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and xpath is not found in DOM.</returns>
            <example>
            <code>
            <![CDATA[
            var ctx = await corewWebView.CreateDevToolsContextAsync();
            string currentURL = null;
            ctx.MainFrame
                .WaitForXPathAsync("//img")
                .ContinueWith(_ => Console.WriteLine("First URL with image: " + currentURL));
            foreach (var current in new[] { "https://example.com", "https://google.com", "https://bbc.com" })
            {
                currentURL = current;
                await ctx.GoToAsync(currentURL);
            }
            ]]>
            </code>
            </example>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForXPathAsync``1(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <exception cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">If timeout occurred.</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.WaitForTimeoutAsync(System.Int32)">
            <summary>
            Waits for a timeout
            </summary>
            <param name="milliseconds">The amount of time to wait.</param>
            <returns>A task that resolves when after the timeout</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForTimeoutAsync(System.Int32)"/>
            <exception cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">If timeout occurred.</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.WaitForFunctionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions,System.Object[])">
            <summary>
            Waits for a function to be evaluated to a truthy value
            </summary>
            <param name="script">Function to be evaluated in browser context</param>
            <param name="options">Optional waiting parameters</param>
            <param name="args">Arguments to pass to <c>script</c></param>
            <returns>A task that resolves when the <c>script</c> returns a truthy value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForFunctionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions,System.Object[])"/>
            <exception cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">If timeout occurred.</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.WaitForExpressionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions)">
            <summary>
            Waits for an expression to be evaluated to a truthy value
            </summary>
            <param name="script">Expression to be evaluated in browser context</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task that resolves when the <c>script</c> returns a truthy value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForExpressionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions)"/>
            <exception cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">If timeout occurred.</exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.SelectAsync(System.String,System.String[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="selector"/></exception>
            <param name="selector">A selector to query page for</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>Returns an array of option values that have been successfully selected.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SelectAsync(System.String,System.String[])"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.QuerySelectorAsync(System.String)">
            <summary>
            Queries frame for the selector. If there's no such element within the frame, the method will resolve to <c>null</c>.
            </summary>
            <param name="selector">Selector to query frame for</param>
            <returns>Task which resolves to <see cref="T:WebView2.DevTools.Dom.Element"/> pointing to the frame element</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.QuerySelectorAsync``1(System.String)">
            <summary>
            Queries frame for the selector. If there's no such element within the frame, the method will resolve to <c>null</c>.
            </summary>
            <typeparam name="T">Type of <see cref="T:WebView2.DevTools.Dom.Element"/> or derived type</typeparam>
            <param name="selector">Selector to query frame for</param>
            <returns>Task which resolves to <see cref="T:WebView2.DevTools.Dom.Element"/> pointing to the frame element</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.QuerySelectorAllAsync(System.String)">
            <summary>
            Queries frame for the selector. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <param name="selector">A selector to query frame for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.QuerySelectorAllAsync``1(System.String)">
            <summary>
            Queries frame for the selector. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <typeparam name="T">Type derived from <see cref="T:WebView2.DevTools.Dom.Element"/></typeparam>
            <param name="selector">A selector to query frame for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.XPathAsync(System.String)">
            <summary>
            Evaluates the XPath expression
            </summary>
            <param name="expression">Expression to evaluate <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate"/></param>
            <returns>Task which resolves to an array of <see cref="T:WebView2.DevTools.Dom.Element"/></returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.XPathAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.AddStyleTagAsync(WebView2.DevTools.Dom.AddTagOptions)">
            <summary>
            Adds a <c><![CDATA[<link rel="stylesheet">]]></c> tag into the page with the desired url or a <c><![CDATA[<link rel="stylesheet">]]></c> tag with the content
            </summary>
            <param name="options">add style tag options</param>
            <returns>Task which resolves to the added tag when the stylesheet's onload fires or when the CSS content was injected into frame</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddStyleTagAsync(WebView2.DevTools.Dom.AddTagOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddStyleTagAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.AddScriptTagAsync(WebView2.DevTools.Dom.AddTagOptions)">
            <summary>
            Adds a <c><![CDATA[<script>]]></c> tag into the page with the desired url or content
            </summary>
            <param name="options">add script tag options</param>
            <returns>Task which resolves to the added tag when the script's onload fires or when the script content was injected into frame</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddScriptTagAsync(WebView2.DevTools.Dom.AddTagOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddScriptTagAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.GetTitleAsync">
            <summary>
            Returns page's title
            </summary>
            <returns>page's title</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.GetTitleAsync"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.ClickAsync(System.String,WebView2.DevTools.Dom.Input.ClickOptions)">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Mouse"/> to click in the center of the element.
            </summary>
            <param name="selector">A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="options">click options</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="selector"/></exception>
            <returns>Task which resolves when the element matching <paramref name="selector"/> is successfully clicked</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.HoverAsync(System.String)">
            <summary>
            Fetches an element with <paramref name="selector"/>, scrolls it into view if needed, and then uses <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Mouse"/> to hover over the center of the element.
            </summary>
            <param name="selector">A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="selector"/></exception>
            <returns>Task which resolves when the element matching <paramref name="selector"/> is successfully hovered</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.FocusAsync(System.String)">
            <summary>
            Fetches an element with <paramref name="selector"/> and focuses it
            </summary>
            <param name="selector">A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused.</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="selector"/></exception>
            <returns>Task which resolves when the element matching <paramref name="selector"/> is successfully focused</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Frame.TypeAsync(System.String,System.String,WebView2.DevTools.Dom.Input.TypeOptions)">
            <summary>
            Sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="selector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="text">A text to type into a focused element</param>
            <param name="options">The options to apply to the type operation.</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="selector"/></exception>
            <remarks>
            To press a special key, like <c>Control</c> or <c>ArrowDown</c> use <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)"/>
            </remarks>
            <example>
            <code>
            <![CDATA[
            await frame.TypeAsync("#mytextarea", "Hello"); // Types instantly
            await frame.TypeAsync("#mytextarea", "World", new TypeOptions { Delay = 100 }); // Types slower, like a user
            ]]>
            </code>
            </example>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.FrameEventArgs">
            <summary>
            <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameAttached"/>, <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameDetached"/> and <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameNavigated"/> arguments.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.FrameEventArgs.Frame">
            <summary>
            Gets or sets the frame.
            </summary>
            <value>The frame.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.FrameEventArgs.#ctor(WebView2.DevTools.Dom.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.FrameEventArgs"/> class.
            </summary>
            <param name="frame">Frame.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.Helpers.AsyncFileHelper">
            <summary>
            Provides static methods for asynchronous file access.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.AsyncFileHelper.CreateStream(System.String,System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)" />
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.AsyncFileHelper.CreateStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" />
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.AsyncFileHelper.CreateStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.AsyncFileHelper.ReadAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String)" />
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.AsyncFileHelper.ReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.AsyncFileHelper.OpenRead(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenRead(System.String)" />
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.AsyncFileHelper.OpenText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.OpenText(System.String)" />
            <param name="path">File path.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1">
            <summary>
            A concurrent, simplified HashSet.
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="F:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.DefaultConcurrencyLevel">
            <summary>
            The default concurrency level is 2. That means the collection can cope with up to two
            threads making simultaneous modifications without blocking.
            Note ConcurrentDictionary's default concurrency level is dynamic, scaling according to
            the number of processors.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.DefaultCapacity">
            <summary>
            Taken from ConcurrentDictionary.DEFAULT_CAPACITY
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1._dictionary">
            <summary>
            The backing dictionary. The values are never used; just the keys.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.#ctor">
            <summary>
            Construct a concurrent set with the default concurrency level.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Construct a concurrent set using the specified equality comparer.
            </summary>
            <param name="equalityComparer">The equality comparer for values in the set.</param>
        </member>
        <member name="P:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.Count">
            <summary>
            Obtain the number of elements in the set.
            </summary>
            <returns>The number of elements in the set.</returns>
        </member>
        <member name="P:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.IsEmpty">
            <summary>
            Determine whether the set is empty.</summary>
            <returns>true if the set is empty; otherwise, false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.Contains(`0)">
            <summary>
            Determine whether the given value is in the set.
            </summary>
            <param name="value">The value to test.</param>
            <returns>true if the set contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.Add(`0)">
            <summary>
            Attempts to add a value to the set.
            </summary>
            <param name="value">The value to add.</param>
            <returns>true if the value was added to the set. If the value already exists, this method returns false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.Remove(`0)">
            <summary>
            Attempts to remove a value from the set.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>true if the value was removed successfully; otherwise false.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.Clear">
            <summary>
            Clear the set
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.ConcurrentSet`1.GetEnumerator">
            <summary>
            Obtain an enumerator that iterates through the elements in the set.
            </summary>
            <returns>An enumerator for the set.</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.Helpers.Json.JsonElementExtensions">
            <summary>
            A set of extension methods for JsonElement
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.Json.JsonElementExtensions.ToObject``1(System.Text.Json.JsonElement,System.Boolean)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:JsonElement" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="token">Json token</param>
            <param name="camelCase">If set to <c>true</c> the CamelCasePropertyNamesContractResolver will be used.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.Json.JsonElementExtensions.ToDynamicObject(System.Text.Json.JsonElement)">
            <summary>
            Convert <see cref="T:System.Text.Json.JsonElement"/> to a <see cref="T:System.Dynamic.ExpandoObject"/>
            Using <see cref="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)"/> doesn't
            yield a usable <see cref="T:System.Dynamic.ExpandoObject"/>
            </summary>
            <param name="jsonElement">json element</param>
            <returns>expando object</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.Json.JsonElementExtensions.ToObject(System.Text.Json.JsonElement,System.Type)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:JsonElement" />.
            </summary>
            <param name="token">Json token</param>
            <param name="returnType">Return Type</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Helpers.StringExtensions.Quote(System.String)">
            <summary>
            Quotes the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">The string to quote.</param>
            <returns>A quoted string.</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.ClickOptions">
            <summary>
            Options to use when clicking
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Input.ClickOptions.Delay">
            <summary>
            Time to wait between <c>mousedown</c> and <c>mouseup</c> in milliseconds. Defaults to 0
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Input.ClickOptions.ClickCount">
            <summary>
            Defaults to 1. See https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Input.ClickOptions.Button">
            <summary>
            The button to use for the click. Defaults to <see cref="F:WebView2.DevTools.Dom.Input.MouseButton.Left"/>
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.DownOptions">
            <summary>
            options to use with <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.DownAsync(System.String,WebView2.DevTools.Dom.Input.DownOptions)"/>
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Input.DownOptions.Text">
            <summary>
            If specified, generates an input event with this text
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.Key">
            <summary>
            Utility class to be used with <see cref="T:WebView2.DevTools.Dom.Input.Keyboard"/> operations
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Cancel">
            <summary>
            Cancel key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Help">
            <summary>
            Help key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Backspace">
            <summary>
            Backspace key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Tab">
            <summary>
            Tab key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Clear">
            <summary>
            Clear key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Enter">
            <summary>
            Enter key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Shift">
            <summary>
            Shift key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Control">
            <summary>
            Control key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Alt">
            <summary>
            Alt key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Pause">
            <summary>
            Pause key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.CapsLock">
            <summary>
            CapsLock key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Escape">
            <summary>
            Escape key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Convert">
            <summary>
            Convert key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.NonConvert">
            <summary>
            NonConvert key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Accept">
            <summary>
            Accept key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ModeChange">
            <summary>
            ModeChange key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.PageUp">
            <summary>
            PageUp key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.PageDown">
            <summary>
            PageDown key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.End">
            <summary>
            End key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Home">
            <summary>
            Home key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ArrowLeft">
            <summary>
            ArrowLeft key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ArrowUp">
            <summary>
            ArrowUp key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ArrowRight">
            <summary>
            ArrowRight key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ArrowDown">
            <summary>
            ArrowDown key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Select">
            <summary>
            Select key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Print">
            <summary>
            Print key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Execute">
            <summary>
            Execute key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.PrintScreen">
            <summary>
            PrintScreen key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Insert">
            <summary>
            Insert key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Delete">
            <summary>
            Delete key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.CloseParentheses">
            <summary>
            ')' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ExclamationMark">
            <summary>
            '!' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.AtSign">
            <summary>
            '@' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.NumberSign">
            <summary>
            '#' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.DollarSign">
            <summary>
            '$' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Percent">
            <summary>
            '%' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Caret">
            <summary>
            '^' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Ampersand">
            <summary>
            <![CDATA['&']]> key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Asterisk">
            <summary>
            Asterisk key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.OpenParentheses">
            <summary>
            '(' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Meta">
            <summary>
            Meta key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ContextMenu">
            <summary>
            ContextMenu key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F12">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F11">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F13">
            <summary>
            F13 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F14">
            <summary>
            F14 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F15">
            <summary>
            F15 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F16">
            <summary>
            F16 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F17">
            <summary>
            F17 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F18">
            <summary>
            F18 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F19">
            <summary>
            F19 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F20">
            <summary>
            F20 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F21">
            <summary>
            F21 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F22">
            <summary>
            F22 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F23">
            <summary>
            F23 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.F24">
            <summary>
            F24 key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.NumLock">
            <summary>
            NumLock key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ScrollLock">
            <summary>
            ScrollLock key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.AudioVolumeMute">
            <summary>
            AudioVolumeMute key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.AudioVolumeDown">
            <summary>
            AudioVolumeDown key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.AudioVolumeUp">
            <summary>
            AudioVolumeUp key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.MediaTrackNext">
            <summary>
            MediaTrackNext key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.MediaTrackPrevious">
            <summary>
            MediaTrackPrevious key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.MediaStop">
            <summary>
            MediaStop key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.MediaPlayPause">
            <summary>
            MediaPlayPause key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Semicolon">
            <summary>
            ';' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Comma">
            <summary>
            ',' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.EqualsSign">
            <summary>
            '=' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.PlusSign">
            <summary>
            '+' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.LesserThan">
            <summary>
            <![CDATA['<']]> key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.MinusSign">
            <summary>
            '-' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Underscore">
            <summary>
            '_' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Period">
            <summary>
            '.' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.GreaterThan">
            <summary>
            <![CDATA['>']]> key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Slash">
            <summary>
            <![CDATA['/']]>key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.QuestionMark">
            <summary>
            '?' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Backquote">
            <summary>
            '`' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Tilde">
            <summary>
            '~' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.OpenSquareBrackets">
            <summary>
            <![CDATA['[']]> key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.OpenBrackets">
            <summary>
            '{' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.CloseSquareBrackets">
            <summary>
            <![CDATA[']']]> key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Pipe">
            <summary>
            '|' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.CloseBrackets">
            <summary>
            '}' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Backslash">
            <summary>
            '\' key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.AltGraph">
            <summary>
            AltGraph key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Attn">
            <summary>
            Attn key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.CrSel">
            <summary>
            CrSel key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ExSel">
            <summary>
            ExSel key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.EraseEof">
            <summary>
            EraseEof key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.Play">
            <summary>
            Play key.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.Key.ZoomOut">
            <summary>
            ZoomOut key.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Key.ToString">
            <inheritdoc />
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Key.op_Implicit(WebView2.DevTools.Dom.Input.Key)~System.String">
            <summary>
            Converts the <paramref name="key"/> to its underlining string value
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.Keyboard">
             <summary>
             Keyboard provides an api for managing a virtual keyboard. The high level api is <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.TypeAsync(System.String,WebView2.DevTools.Dom.Input.TypeOptions)"/>, which takes raw characters and generates proper keydown, keypress/input, and keyup events on your page.
            
             For finer control, you can use <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.DownAsync(System.String,WebView2.DevTools.Dom.Input.DownOptions)"/>, <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.UpAsync(System.String)"/>, and <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.SendCharacterAsync(System.String)"/> to manually fire events as if they were generated from a real keyboard.
             </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Keyboard.DownAsync(System.String,WebView2.DevTools.Dom.Input.DownOptions)">
            <summary>
            Dispatches a <c>keydown</c> event
            </summary>
            <param name="key">Name of key to press, such as <c>ArrowLeft</c>. <see cref="T:WebView2.DevTools.Dom.Input.KeyDefinitions"/> for a list of all key names.</param>
            <param name="options">down options</param>
            <remarks>
            If <c>key</c> is a single character and no modifier keys besides <c>Shift</c> are being held down, a <c>keypress</c>/<c>input</c> event will also generated. The <c>text</c> option can be specified to force an input event to be generated.
            If <c>key</c> is a modifier key, <c>Shift</c>, <c>Meta</c>, <c>Control</c>, or <c>Alt</c>, subsequent key presses will be sent with that modifier active. To release the modifier key, use <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.UpAsync(System.String)"/>
            After the key is pressed once, subsequent calls to <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.DownAsync(System.String,WebView2.DevTools.Dom.Input.DownOptions)"/> will have <see href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat">repeat</see> set to <c>true</c>. To release the key, use <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.UpAsync(System.String)"/>
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Keyboard.UpAsync(System.String)">
            <summary>
            Dispatches a <c>keyup</c> event.
            </summary>
            <param name="key">Name of key to release, such as `ArrowLeft`. See <see cref="T:WebView2.DevTools.Dom.Input.KeyDefinitions"/> for a list of all key names.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Keyboard.SendCharacterAsync(System.String)">
            <summary>
            Dispatches a <c>keypress</c> and <c>input</c> event. This does not send a <c>keydown</c> or <c>keyup</c> event.
            </summary>
            <param name="charText">Character to send into the page</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Keyboard.TypeAsync(System.String,WebView2.DevTools.Dom.Input.TypeOptions)">
            <summary>
            Sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="text">A text to type into a focused element</param>
            <param name="options">type options</param>
            <remarks>
            To press a special key, like <c>Control</c> or <c>ArrowDown</c>, use <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)"/>
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Keyboard.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)">
            <summary>
            Shortcut for <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.DownAsync(System.String,WebView2.DevTools.Dom.Input.DownOptions)"/> and <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.UpAsync(System.String)"/>
            </summary>
            <param name="key">Name of key to press, such as <c>ArrowLeft</c>. <see cref="T:WebView2.DevTools.Dom.Input.KeyDefinitions"/> for a list of all key names.</param>
            <param name="options">press options</param>
            <remarks>
            If <paramref name="key"/> is a single character and no modifier keys besides <c>Shift</c> are being held down, a <c>keypress</c>/<c>input</c> event will also generated. The <see cref="P:WebView2.DevTools.Dom.Input.DownOptions.Text"/> option can be specified to force an input event to be generated.
            Modifier keys DO effect <see cref="M:WebView2.DevTools.Dom.HtmlElement.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)"/>. Holding down <c>Shift</c> will type the text in upper case.
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.Mouse">
            <summary>
            Provides methods to interact with the mouse
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Mouse.#ctor(Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.DevToolsProtocolHelper,WebView2.DevTools.Dom.Input.Keyboard)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.Input.Mouse"/> class.
            </summary>
            <param name="client">The client</param>
            <param name="keyboard">The keyboard</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Mouse.MoveAsync(System.Double,System.Double,WebView2.DevTools.Dom.Input.MoveOptions)">
            <summary>
            Dispatches a <c>mousemove</c> event.
            </summary>
            <param name="x">The destination mouse X coordinate.</param>
            <param name="y">The destination mouse Y coordinate.</param>
            <param name="options">Options to apply to the move operation.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Mouse.ClickAsync(System.Double,System.Double,WebView2.DevTools.Dom.Input.ClickOptions)">
            <summary>
            Shortcut for <see cref="M:WebView2.DevTools.Dom.Input.Mouse.MoveAsync(System.Double,System.Double,WebView2.DevTools.Dom.Input.MoveOptions)"/>, <see cref="M:WebView2.DevTools.Dom.Input.Mouse.DownAsync(WebView2.DevTools.Dom.Input.ClickOptions)"/> and <see cref="M:WebView2.DevTools.Dom.Input.Mouse.UpAsync(WebView2.DevTools.Dom.Input.ClickOptions)"/>
            </summary>
            <param name="x">The target mouse X location to click.</param>
            <param name="y">The target mouse Y location to click.</param>
            <param name="options">Options to apply to the click operation.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Mouse.DownAsync(WebView2.DevTools.Dom.Input.ClickOptions)">
            <summary>
            Dispatches a <c>mousedown</c> event.
            </summary>
            <param name="options">Options to apply to the mouse down operation.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Mouse.UpAsync(WebView2.DevTools.Dom.Input.ClickOptions)">
            <summary>
            Dispatches a <c>mouseup</c> event.
            </summary>
            <param name="options">Options to apply to the mouse up operation.</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Mouse.WheelAsync(System.Double,System.Double)">
            <summary>
            Dispatches a <c>wheel</c> event.
            </summary>
            <param name="deltaX">Delta X.</param>
            <param name="deltaY">Delta Y.</param>
            <returns>Task</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.MouseButton">
            <summary>
            The type of button click to use with <see cref="M:WebView2.DevTools.Dom.Input.Mouse.DownAsync(WebView2.DevTools.Dom.Input.ClickOptions)"/>, <see cref="M:WebView2.DevTools.Dom.Input.Mouse.UpAsync(WebView2.DevTools.Dom.Input.ClickOptions)"/> and <see cref="M:WebView2.DevTools.Dom.Input.Mouse.ClickAsync(System.Double,System.Double,WebView2.DevTools.Dom.Input.ClickOptions)"/>
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.MouseButton.None">
            <summary>
            Non specified
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.MouseButton.Left">
            <summary>
            The left mouse button
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.MouseButton.Right">
            <summary>
            The right mouse button
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.MouseButton.Middle">
            <summary>
            The middle mouse button
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.MoveOptions">
            <summary>
            options to use <see cref="M:WebView2.DevTools.Dom.Input.Mouse.MoveAsync(System.Double,System.Double,WebView2.DevTools.Dom.Input.MoveOptions)"/>
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Input.MoveOptions.DefaultSteps">
            <summary>
            Default number of mouse Steps
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Input.MoveOptions.Steps">
            <summary>
            Sends intermediate <c>mousemove</c> events. Defaults to <see cref="F:WebView2.DevTools.Dom.Input.MoveOptions.DefaultSteps"/>
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.PressOptions">
            <summary>
            options to use when pressing a key.
            </summary>
            <seealso cref="M:WebView2.DevTools.Dom.Input.Keyboard.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.HtmlElement.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)"/>
        </member>
        <member name="P:WebView2.DevTools.Dom.Input.PressOptions.Delay">
            <summary>
            Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.PressOptions.WithDelayInMs(System.Int32)">
            <summary>
            Create a new <see cref="T:WebView2.DevTools.Dom.Input.PressOptions"/> instance with
            the specified delay
            </summary>
            <param name="delay">delay in ms</param>
            <returns>PressOptions</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.Touchscreen">
            <summary>
            Provides methods to interact with the touch screen
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.Input.Touchscreen.TapAsync(System.Double,System.Double)">
            <summary>
            Dispatches a <c>touchstart</c> and <c>touchend</c> event.
            </summary>
            <param name="x">The touch X location.</param>
            <param name="y">The touch Y location.</param>
            <returns>Task</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.TapAsync(System.String)"/>
        </member>
        <member name="T:WebView2.DevTools.Dom.Input.TypeOptions">
            <summary>
            Options to use when typing
            </summary>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.TypeAsync(System.String,System.String,WebView2.DevTools.Dom.Input.TypeOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.HtmlElement.TypeAsync(System.String,WebView2.DevTools.Dom.Input.TypeOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.Input.Keyboard.TypeAsync(System.String,WebView2.DevTools.Dom.Input.TypeOptions)"/>
        </member>
        <member name="P:WebView2.DevTools.Dom.Input.TypeOptions.Delay">
            <summary>
            Time to wait between <c>keydown</c> and <c>keyup</c> in milliseconds. Defaults to 0.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.JavascriptHandle">
            <summary>
            JavascriptHandle represents an in-page JavaScript object. JavascriptHandles can be created with the <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionHandleAsync(System.String)"/> and <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionHandleAsync(System.String,System.Object[])"/> methods.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.GetPropertiesAsync">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.Dictionary`2"/> with property names as keys and <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances for the property values.
            </summary>
            <returns>Task which resolves to a <see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
            <example>
            <code>
            <![CDATA[
            var handle = await devToolsContext.EvaluateExpressionHandle("({window, document})");
            var properties = await handle.GetPropertiesAsync();
            var windowHandle = properties["window"];
            var documentHandle = properties["document"];
            await handle.DisposeAsync();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.EvaluateFunctionHandleAsync(System.String,System.Object[])">
            <summary>
            Executes a script in browser context
            </summary>
            <param name="pageFunction">Script to be evaluated in browser context</param>
            <param name="args">Function arguments</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.EvaluateFunctionHandleAsync``1(System.String,System.Object[])">
            <summary>
            Executes a script in browser context
            </summary>
            <param name="pageFunction">Script to be evaluated in browser context</param>
            <param name="args">Function arguments</param>
            <typeparam name="T">Type derived from <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/></typeparam>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.EvaluateFunctionAsync(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.EvaluateFunctionAsync``1(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.GetValueAsync``1">
            <summary>
            Returns the corrosponding value of the object
            </summary>
            <typeparam name="T">A strongly typed object to parse to</typeparam>
            <returns>Task</returns>
            <remarks>
            The method will return an default(T) if the referenced object is not stringifiable. It will throw an error if the object has circular references
            </remarks>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.JsonValueAsync">
            <summary>
            Returns a JSON representation of the object
            </summary>
            <returns>Task</returns>
            <remarks>
            The method will return an empty JSON if the referenced object is not stringifiable. It will throw an error if the object has circular references
            </remarks>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.GetPropertyAsync(System.String)">
            <summary>
            Fetches a single property from the referenced object
            </summary>
            <param name="propertyName">property to get</param>
            <returns>Task of <see cref="T:WebView2.DevTools.Dom.JavascriptHandle"/></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.JavascriptHandle.GetPropertyValueAsync``1(System.String)">
            <summary>
            Gets the property value for a single property
            </summary>
            <typeparam name="T">Property Value Type e.g. string, int</typeparam>
            <param name="propertyName">property to get</param>
            <returns>Task of <typeparamref name="T"/></returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException">Thrown if no matching property is found</exception>
        </member>
        <member name="T:WebView2.DevTools.Dom.Media.Clip">
            <summary>
            Clip data.
            </summary>
            <seealso cref="M:WebView2.DevTools.Dom.BoundingBox.ToClip"/>
        </member>
        <member name="P:WebView2.DevTools.Dom.Media.Clip.X">
            <summary>
            x-coordinate of top-left corner of clip area.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Media.Clip.Y">
            <summary>
            y-coordinate of top-left corner of clip area.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Media.Clip.Width">
            <summary>
            Width of clipping area.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Media.Clip.Height">
            <summary>
            Height of clipping area.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Media.Clip.Scale">
            <summary>
            Scale of the webpage rendering. Defaults to 1.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="T:WebView2.DevTools.Dom.Media.MediaType">
            <summary>
            Media type.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Media.MediaType.Print">
            <summary>
            Media Print.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Media.MediaType.Screen">
            <summary>
            Media Screen.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Media.MediaType.None">
            <summary>
            No media set
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype">
            <summary>
            Remote object subtype.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Array">
            <summary>
            Array.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Null">
            <summary>
            Null.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Regexp">
            <summary>
            Regexp.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Map">
            <summary>
            Map.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Set">
            <summary>
            Set.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Weakmap">
            <summary>
            Weakmap.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Weakset">
            <summary>
            Weakset.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Iterator">
            <summary>
            Iterator.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Generator">
            <summary>
            Generator.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Proxy">
            <summary>
            Proxy.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Promise">
            <summary>
            Promise.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Typedarray">
            <summary>
            Typedarray.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Arraybuffer">
            <summary>
            Arraybuffer.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectSubtype.Dataview">
            <summary>
            Dataview.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Messaging.RemoteObjectType">
            <summary>
            Remote object type.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Object">
            <summary>
            Object.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Function">
            <summary>
            Function.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Number">
            <summary>
            Number.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Symbol">
            <summary>
            Symbol.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Messaging.RemoteObjectType.Bigint">
            <summary>
            Bigint.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Mobile.DeviceDescriptor">
            <summary>
            Device descriptor.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.Mobile.DeviceDescriptor.Name">
            <summary>
            Device name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Mobile.DeviceDescriptor.UserAgent">
            <summary>
            User Agent
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.Mobile.DeviceDescriptor.ViewPort">
            <summary>
            ViewPort.
            </summary>
            <value>The view port.</value>
        </member>
        <member name="T:WebView2.DevTools.Dom.Mobile.DeviceDescriptors">
            <summary>
            Device descriptors.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.Mobile.DeviceName">
            <summary>
            Device descriptor name.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.BlackberryPlayBook">
            <summary>
            Blackberry PlayBook
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.BlackberryPlayBookLandscape">
            <summary>
            Blackberry PlayBook landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.BlackBerryZ30">
            <summary>
            BlackBerry Z30
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.BlackBerryZ30Landscape">
            <summary>
            BlackBerry Z30 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyNote3">
            <summary>
            Galaxy Note 3
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyNote3Landscape">
            <summary>
            Galaxy Note 3 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyNoteII">
            <summary>
            Galaxy Note II
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyNoteIILandscape">
            <summary>
            Galaxy Note II landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxySIII">
            <summary>
            Galaxy S III
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxySIIILandscape">
            <summary>
            Galaxy S III landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyS5">
            <summary>
            Galaxy S5
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyS5Landscape">
            <summary>
            Galaxy S5 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyS8">
            <summary>
            Galaxy S8
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyS8Landscape">
            <summary>
            Galaxy S8 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyS9Plus">
            <summary>
            Galaxy S9+
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyS9PlusLandscape">
            <summary>
            Galaxy S9+ landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyTabS4">
            <summary>
            Galaxy Tab S4
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.GalaxyTabS4Landscape">
            <summary>
            Galaxy Tab S4 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPad">
            <summary>
            iPad
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPadLandscape">
            <summary>
            iPad landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPadMini">
            <summary>
            iPad Mini
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPadMiniLandscape">
            <summary>
            iPad Mini landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPadPro">
            <summary>
            iPad Pro
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPadProLandscape">
            <summary>
            iPad Pro landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone4">
            <summary>
            iPhone 4
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone4Landscape">
            <summary>
            iPhone 4 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone5">
            <summary>
            iPhone 5
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone5Landscape">
            <summary>
            iPhone 5 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone6">
            <summary>
            iPhone 6
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone6Landscape">
            <summary>
            iPhone 6 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone6Plus">
            <summary>
            iPhone 6 Plus
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone6PlusLandscape">
            <summary>
            iPhone 6 Plus landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone7">
            <summary>
            iPhone 7
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone7Landscape">
            <summary>
            iPhone 7 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone7Plus">
            <summary>
            iPhone 7 Plus
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone7PlusLandscape">
            <summary>
            iPhone 7 Plus landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone8">
            <summary>
            iPhone 8
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone8Landscape">
            <summary>
            iPhone 8 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone8Plus">
            <summary>
            iPhone 8 Plus
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone8PlusLandscape">
            <summary>
            iPhone 8 Plus landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhoneSE">
            <summary>
            iPhone SE
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhoneSELandscape">
            <summary>
            iPhone SE landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhoneX">
            <summary>
            iPhone X
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhoneXLandscape">
            <summary>
            iPhone X landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhoneXR">
            <summary>
            iPhone XR
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhoneXRLandscape">
            <summary>
            iPhone XR landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone11">
            <summary>
            iPhone 11
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone11Landscape">
            <summary>
            iPhone 11 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone11Pro">
            <summary>
            iPhone 11 Pro
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone11ProLandscape">
            <summary>
            iPhone 11 Pro landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone11ProMax">
            <summary>
            iPhone 11 Pro Max
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.IPhone11ProMaxLandscape">
            <summary>
            iPhone 11 Pro Max landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.JioPhone2">
            <summary>
            JioPhone 2
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.JioPhone2Landscape">
            <summary>
            JioPhone 2 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.KindleFireHDX">
            <summary>
            Kindle Fire HDX
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.KindleFireHDXLandscape">
            <summary>
            Kindle Fire HDX landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.LGOptimusL70">
            <summary>
            LG Optimus L70
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.LGOptimusL70Landscape">
            <summary>
            LG Optimus L70 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.MicrosoftLumia550">
            <summary>
            Microsoft Lumia 550
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.MicrosoftLumia950">
            <summary>
            Microsoft Lumia 950
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.MicrosoftLumia950Landscape">
            <summary>
            Microsoft Lumia 950 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus10">
            <summary>
            Nexus 10
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus10Landscape">
            <summary>
            Nexus 10 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus4">
            <summary>
            Nexus 4
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus4Landscape">
            <summary>
            Nexus 4 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus5">
            <summary>
            Nexus 5
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus5Landscape">
            <summary>
            Nexus 5 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus5X">
            <summary>
            Nexus 5X
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus5XLandscape">
            <summary>
            Nexus 5X landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus6">
            <summary>
            Nexus 6
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus6Landscape">
            <summary>
            Nexus 6 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus6P">
            <summary>
            Nexus 6P
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus6PLandscape">
            <summary>
            Nexus 6P landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus7">
            <summary>
            Nexus 7
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Nexus7Landscape">
            <summary>
            Nexus 7 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.NokiaLumia520">
            <summary>
            Nokia Lumia 520
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.NokiaLumia520Landscape">
            <summary>
            Nokia Lumia 520 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.NokiaN9">
            <summary>
            Nokia N9
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.NokiaN9Landscape">
            <summary>
            Nokia N9 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel2">
            <summary>
            Pixel 2
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel2Landscape">
            <summary>
            Pixel 2 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel2XL">
            <summary>
            Pixel 2 XL
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel2XLLandscape">
            <summary>
            Pixel 2 XL landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel3">
            <summary>
            Pixel 3
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel3Landscape">
            <summary>
            Pixel 3 landscape
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel4">
            <summary>
            Pixel 4
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.Mobile.DeviceName.Pixel4Landscape">
            <summary>
            Pixel 4 landscape
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.NetworkConditions">
            <summary>
            Options to be used in <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EmulateNetworkConditionsAsync(WebView2.DevTools.Dom.NetworkConditions)"/>
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NetworkConditions.Slow3G">
            <summary>
            Key to be used with <see cref="M:WebView2.DevTools.Dom.NetworkConditions.#ctor"/>
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.NetworkConditions.Fast3G">
            <summary>
            Key to be used with <see cref="M:WebView2.DevTools.Dom.NetworkConditions.#ctor"/>
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.NetworkConditions.Download">
            <summary>
            Download speed (bytes/s), `-1` to disable
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.NetworkConditions.Upload">
            <summary>
            Upload speed (bytes/s), `-1` to disable
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.NetworkConditions.Latency">
            <summary>
            Latency (ms), `0` to disable
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.PredefinedNetworkConditions">
            <summary>
            Predefined network conditions.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.PredefinedNetworkConditions.GetNetworkCondition(System.String)">
            <summary>
            Get Network condition
            </summary>
            <param name="key">key</param>
            <returns>network condition</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.ReasonPhrases">
            <summary>
            Provides access to HTTP status code reason phrases as listed in
            http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ReasonPhrases.GetReasonPhrase(System.Int32)">
            <summary>
            Gets the reason phrase for the specified status code.
            </summary>
            <param name="statusCode">The status code.</param>
            <returns>The reason phrase, or <see cref="F:System.String.Empty"/> if the status code is unknown.</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.RemoteHandle">
            <summary>
            Mirror object referencing original JavaScript/DOM object.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.RemoteHandle.ExecutionContext">
            <summary>
            Gets the execution context.
            </summary>
            <value>The execution context.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.RemoteHandle.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.RemoteHandle.RemoteObject">
            <summary>
            Gets or sets the remote object.
            </summary>
            <value>The remote object.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.RemoteHandle.DevToolsProtocolHelper">
            <summary>
            Gets the client.
            </summary>
            <value>The client.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.RemoteHandle.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteHandle.DisposeAsync">
            <summary>
            Disposes the Handle. It will mark the JSHandle as disposed and release the <see cref="P:WebView2.DevTools.Dom.RemoteHandle.RemoteObject"/>
            </summary>
            <returns>The async.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteHandle.ToString">
            <inheritdoc/>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteHandle.EvaluateFunctionInternalAsync(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteHandle.EvaluateFunctionInternalAsync``1(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.RemoteObjectExtensions">
            <summary>
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> and <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> Extensions.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync(System.Threading.Tasks.Task{WebView2.DevTools.Dom.HtmlElement},System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome of <paramref name="elementHandleTask"/> as the first argument
            </summary>
            <param name="elementHandleTask">A task that returns an <see cref="T:WebView2.DevTools.Dom.Element"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task</returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If <paramref name="elementHandleTask"/> resolves to <c>null</c></exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync(System.Threading.Tasks.Task{WebView2.DevTools.Dom.Element},System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome of <paramref name="elementHandleTask"/> as the first argument
            </summary>
            <param name="elementHandleTask">A task that returns an <see cref="T:WebView2.DevTools.Dom.Element"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task</returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If <paramref name="elementHandleTask"/> resolves to <c>null</c></exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.HtmlElement},System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome of <paramref name="elementHandleTask"/> as the first argument
            </summary>
            <typeparam name="T">The type of the response</typeparam>
            <param name="elementHandleTask">A task that returns an <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task which resolves to the return value of <c>pageFunction</c></returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If <paramref name="elementHandleTask"/> resolves to <c>null</c></exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.Element},System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome of <paramref name="elementHandleTask"/> as the first argument
            </summary>
            <typeparam name="T">The type of the response</typeparam>
            <param name="elementHandleTask">A task that returns an <see cref="T:WebView2.DevTools.Dom.Element"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task which resolves to the return value of <c>pageFunction</c></returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If <paramref name="elementHandleTask"/> resolves to <c>null</c></exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(WebView2.DevTools.Dom.Element,System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome the <paramref name="elementHandle"/> as the first argument
            </summary>
            <typeparam name="T">The type of the response</typeparam>
            <param name="elementHandle">An <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task which resolves to the return value of <c>pageFunction</c></returns>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If <paramref name="elementHandle"/> is <c>null</c></exception>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync(System.Threading.Tasks.Task{WebView2.DevTools.Dom.JavascriptHandle},System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome of <paramref name="arrayHandleTask"/> as the first argument. Use only after <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllHandleAsync(System.String)"/>
            </summary>
            <param name="arrayHandleTask">A task that returns an <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> that represents an array of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.JavascriptHandle},System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome of <paramref name="arrayHandleTask"/> as the first argument. Use only after <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllHandleAsync(System.String)"/>
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="arrayHandleTask">A task that returns an <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> that represents an array of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task which resolves to the return value of <c>pageFunction</c></returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(WebView2.DevTools.Dom.JavascriptHandle,System.String,System.Object[])">
            <summary>
            Runs <paramref name="pageFunction"/> within the frame and passes it the outcome of <paramref name="arrayHandle"/> as the first argument. Use only after <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllHandleAsync(System.String)"/>
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="arrayHandle">An <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> that represents an array of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> that will be used as the first argument in <paramref name="pageFunction"/></param>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <returns>Task which resolves to the return value of <c>pageFunction</c></returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.RuntimeExceptionEventArgs">
            <summary>
            Page error event arguments.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.RuntimeExceptionEventArgs.Message">
            <summary>
            Error Message
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.RuntimeExceptionEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.RuntimeExceptionEventArgs"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.ViewPortOptions">
            <summary>
            View port options used on <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetViewportAsync(WebView2.DevTools.Dom.ViewPortOptions)"/>.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.ViewPortOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.ViewPortOptions"/> class.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.ViewPortOptions.Width">
            <summary>
            Gets or sets the width
            </summary>
            <value>The page width width in pixels.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.ViewPortOptions.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The page height in pixels.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.ViewPortOptions.IsMobile">
            <summary>
            Gets or sets whether the meta viewport tag is taken into account.
            </summary>
            <value>Whether the meta viewport tag is taken into account. Defaults to <c>false</c>.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.ViewPortOptions.DeviceScaleFactor">
            <summary>
            Gets or sets the device scale factor.
            </summary>
            <value>Specify device scale factor (can be thought of as dpr). Defaults to 1.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.ViewPortOptions.IsLandscape">
             <summary>
             Gets or sets if viewport is in landscape mode.
             </summary>
            <value>Specifies if viewport is in landscape mode. Defaults to <c>false</c>.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.ViewPortOptions.HasTouch">
            <summary>
            Gets or sets if viewport supports touch events.
            </summary>
            <value>Specifies if viewport supports touch events. Defaults to <c>false</c>.</value>
        </member>
        <member name="T:WebView2.DevTools.Dom.WaitForFunctionOptions">
            <summary>
            Optional waiting parameters.
            </summary>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForFunctionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions,System.Object[])"/>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForFunctionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions,System.Object[])"/>
            <seealso cref="T:WebView2.DevTools.Dom.WaitForSelectorOptions"/>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitForFunctionOptions.Timeout">
            <summary>
            Maximum time to wait for in milliseconds. Defaults to 30000 (30 seconds). Pass 0 to disable timeout.
            The default value can be changed by setting the <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.DefaultTimeout"/> property.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitForFunctionOptions.Polling">
            <summary>
            An interval at which the <c>pageFunction</c> is executed. defaults to <see cref="F:WebView2.DevTools.Dom.WaitForFunctionPollingOption.Raf"/>
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitForFunctionOptions.PollingInterval">
            <summary>
            An interval at which the <c>pageFunction</c> is executed. If no value is specified will use <see cref="P:WebView2.DevTools.Dom.WaitForFunctionOptions.Polling"/>
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.WaitForFunctionPollingOption">
            <summary>
            An interval at which the <c>pageFunction</c> is executed.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.WaitForFunctionPollingOption.Raf">
            <summary>
            To constantly execute <c>pageFunction</c> in <c>requestAnimationFrame</c> callback.
            This is the tightest polling mode which is suitable to observe styling changes.
            </summary>
        </member>
        <member name="F:WebView2.DevTools.Dom.WaitForFunctionPollingOption.Mutation">
            <summary>
            To execute <c>pageFunction</c> on every DOM mutation.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.WaitForSelectorOptions">
            <summary>
            Optional waiting parameters.
            </summary>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitForSelectorOptions.Timeout">
            <summary>
            Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds).
            Pass `0` to disable timeout.
            The default value can be changed by using <seealso cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.DefaultTimeout"/>  method
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitForSelectorOptions.Visible">
            <summary>
            Wait for element to be present in DOM and to be visible.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitForSelectorOptions.Hidden">
            <summary>
            Wait for element to not be found in the DOM or to be hidden.
            </summary>
        </member>
        <member name="T:WebView2.DevTools.Dom.WaitTaskTimeoutException">
            <summary>
            Timeout exception that might be thrown by <c>WaitFor</c> methods in <see cref="T:WebView2.DevTools.Dom.Frame"/>.
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitTaskTimeoutException.Timeout">
            <summary>
            Timeout that caused the exception
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.WaitTaskTimeoutException.ElementType">
            <summary>
            Element type the WaitTask was waiting for
            </summary>
            <value>The element.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.WaitTaskTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.WaitTaskTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WaitTaskTimeoutException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException"/> class.
            </summary>
            <param name="timeout">Timeout.</param>
            <param name="elementType">Element type.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WaitTaskTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WaitTaskTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WaitTaskTimeoutException"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.WebView2DevToolsContext">
            <summary>
            Provides methods for accessing/modifying the DOM, executing javascript, adding CSS elements,
            basic automation tasks.
            A WebView2DevToolsContext is associated with a single <see cref="T:Microsoft.Web.WebView2.Core.CoreWebView2"/> instance
            </summary>
        </member>
        <member name="E:WebView2.DevTools.Dom.WebView2DevToolsContext.Error">
            <summary>
            Raised when the page crashes
            </summary>
        </member>
        <member name="E:WebView2.DevTools.Dom.WebView2DevToolsContext.Dialog">
            <summary>
            Raised when a JavaScript dialog appears, such as <c>alert</c>, <c>prompt</c>, <c>confirm</c> or <c>beforeunload</c>. You can respond to the dialog via <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.Dialog"/>'s <see cref="M:WebView2.DevTools.Dom.Dialog.Accept(System.String)"/> or <see cref="M:WebView2.DevTools.Dom.Dialog.Dismiss"/> methods.
            </summary>
        </member>
        <member name="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameAttached">
            <summary>
            Raised when a frame is attached.
            </summary>
        </member>
        <member name="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameDetached">
            <summary>
            Raised when a frame is detached.
            </summary>
        </member>
        <member name="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FrameNavigated">
            <summary>
            Raised when a frame is navigated to a new url.
            </summary>
        </member>
        <member name="E:WebView2.DevTools.Dom.WebView2DevToolsContext.RuntimeException">
            <summary>
            Raised when an uncaught exception happens within the page.
            </summary>
        </member>
        <member name="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FileChooserOpened">
            <summary>
            Raised when a File chooser Dialog is opened.
            Will only be raised when Dialog Interception is enabled
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsContext.DefaultTimeout">
            <summary>
            This setting will change the default maximum times for the following methods:
            - <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            - <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            - <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForExpressionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions)"/>
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsContext.MainFrame">
            <summary>
            Gets page's main frame
            </summary>
            <remarks>
            Page is guaranteed to have a main frame which persists during navigations.
            </remarks>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Frames">
            <summary>
            Gets all frames attached to the page.
            </summary>
            <value>An array of all frames attached to the page.</value>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Url">
            <summary>
            Shortcut for <c>page.MainFrame.Url</c>
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Keyboard">
            <summary>
            Gets this page's keyboard
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Touchscreen">
            <summary>
            Gets this page's touchscreen
            </summary>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Mouse">
            <summary>
            Gets this page's mouse
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetContentAsync(System.String)">
            <summary>
            Sets the HTML markup to the page
            </summary>
            <param name="html">HTML markup to assign to the page.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.GetContentAsync">
            <summary>
            Gets the full HTML contents of the page, including the doctype.
            </summary>
            <returns>Task which resolves to the HTML content.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.GetContentAsync"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetInterceptFileChooserDialogAsync(System.Boolean)">
            <summary>
            When enabled intercepts file chooser requests and transfer control to client. When
            file chooser interception is enabled, native file chooser dialog is not shown.
            Instead, the <see cref="E:WebView2.DevTools.Dom.WebView2DevToolsContext.FileChooserOpened"/> event is raised.
            </summary>
            <param name="enabled">Interception enabled</param>
            <returns>A Task that resolves when the message was confirmed by the browser</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.TapAsync(System.String)">
            <summary>
            Fetches an element with <paramref name="querySelector"/>, scrolls it into view if needed, and then uses <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Touchscreen"/> to tap in the center of the element.
            </summary>
            <param name="querySelector">A selector to search for element to tap. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="querySelector"/></exception>
            <returns>Task which resolves when the element matching <paramref name="querySelector"/> is successfully tapped</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAsync``1(System.String)">
            <summary>
            The method runs <c>document.querySelector</c> within the page. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <typeparam name="T">Type of <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> or derived type</typeparam>
            <param name="querySelector">A selector to query page for</param>
            <returns>Task which resolves to <see cref="T:WebView2.DevTools.Dom.HtmlElement"/> pointing to the frame element</returns>
            <remarks>
            Shortcut for <c>page.MainFrame.QuerySelectorAsync(selector)</c>
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.QuerySelectorAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAsync(System.String)">
            <summary>
            The method runs <c>document.querySelector</c> within the page. If no element matches the selector, the return value resolve to <c>null</c>.
            </summary>
            <param name="querySelector">A selector to query page for</param>
            <returns>Task which resolves to <see cref="T:WebView2.DevTools.Dom.Element"/> pointing to the frame element</returns>
            <remarks>
            Shortcut for <c>page.MainFrame.QuerySelectorAsync(selector)</c>
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.QuerySelectorAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllAsync(System.String)">
            <summary>
            Runs <c>document.querySelectorAll</c> within the page. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <param name="querySelector">A selector to query page for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.QuerySelectorAllAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllAsync``1(System.String)">
            <summary>
            Runs <c>document.querySelectorAll</c> within the page. If no elements match the selector, the return value resolve to <see cref="M:System.Array.Empty``1"/>.
            </summary>
            <typeparam name="T">Type derived from <see cref="T:WebView2.DevTools.Dom.Element"/></typeparam>
            <param name="querySelector">A selector to query page for</param>
            <returns>Task which resolves to ElementHandles pointing to the frame elements</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.QuerySelectorAllAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QuerySelectorAllHandleAsync(System.String)">
            <summary>
            A utility function to be used with <see cref="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.JavascriptHandle},System.String,System.Object[])"/>
            </summary>
            <param name="querySelector">A selector to query page for</param>
            <returns>Task which resolves to a <see cref="T:WebView2.DevTools.Dom.JavascriptHandle"/> of <c>document.querySelectorAll</c> result</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.XPathAsync(System.String)">
            <summary>
            Evaluates the XPath expression
            </summary>
            <param name="expression">Expression to evaluate <see href="https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate"/></param>
            <returns>Task which resolves to an array of <see cref="T:WebView2.DevTools.Dom.Element"/></returns>
            <remarks>
            Shortcut for <c>page.MainFrame.XPathAsync(expression)</c>
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.XPathAsync(System.String)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionHandleAsync(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionHandleAsync``1(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionHandleAsync(System.String,System.Object[])">
            <summary>
            Executes a script in browser context
            </summary>
            <param name="pageFunction">Script to be evaluated in browser context</param>
            <param name="args">Function arguments</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionHandleAsync``1(System.String,System.Object[])">
            <summary>
            Executes a script in browser context
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="pageFunction">Script to be evaluated in browser context</param>
            <param name="args">Function arguments</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionOnNewDocumentAsync(System.String,System.Object[])">
            <summary>
            Adds a function which would be invoked in one of the following scenarios:
            - whenever the page is navigated
            - whenever the child frame is attached or navigated. In this case, the function is invoked in the context of the newly attached frame
            </summary>
            <param name="pageFunction">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>pageFunction</c></param>
            <remarks>
            The function is invoked after the document was created but before any of its scripts were run. This is useful to amend JavaScript environment, e.g. to seed <c>Math.random</c>.
            </remarks>
            <example>
            An example of setting a custom property before the page loads:
            <code>
            <![CDATA[
            await devToolsContext.EvaluateFunctionOnNewDocumentAsync("() => window.__example = true");
            ]]>
            </code>
            </example>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionOnNewDocumentAsync(System.String)">
            <summary>
            Adds a function which would be invoked in one of the following scenarios:
            - whenever the page is navigated
            - whenever the child frame is attached or navigated. In this case, the function is invoked in the context of the newly attached frame
            </summary>
            <param name="expression">Javascript expression to be evaluated in browser context</param>
            <remarks>
            The function is invoked after the document was created but before any of its scripts were run. This is useful to amend JavaScript environment, e.g. to seed <c>Math.random</c>.
            </remarks>
            <example>
            An example of setting a custom property before the page loads:
            <code>
            <![CDATA[
            await devToolsContext.EvaluateExpressionOnNewDocumentAsync("window.__example = true;");
            ]]>
            </code>
            </example>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.QueryObjectsAsync(WebView2.DevTools.Dom.JavascriptHandle)">
            <summary>
            The method iterates JavaScript heap and finds all the objects with the given prototype.
            Shortcut for <c>page.MainFrame.GetExecutionContextAsync().QueryObjectsAsync(prototypeHandle)</c>.
            </summary>
            <returns>A task which resolves to a handle to an array of objects with this prototype.</returns>
            <param name="prototypeHandle">A handle to the object prototype.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EmulateNetworkConditionsAsync(WebView2.DevTools.Dom.NetworkConditions)">
            <summary>
            Emulates network conditions
            </summary>
            <param name="networkConditions">Passing <c>null</c> disables network condition emulation.</param>
            <returns>Result task</returns>
            <remarks>
            **NOTE** This does not affect WebSockets and WebRTC PeerConnections (see https://crbug.com/563644)
            </remarks>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.GetCookiesAsync(System.String[])">
            <summary>
            Returns the page's cookies
            </summary>
            <param name="urls">Url's to return cookies for</param>
            <returns>Array of cookies</returns>
            <remarks>
            If no URLs are specified, this method returns cookies for the current page URL.
            If URLs are specified, only cookies for those URLs are returned.
            </remarks>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddScriptTagAsync(WebView2.DevTools.Dom.AddTagOptions)">
            <summary>
            Adds a <c><![CDATA[<script>]]></c> tag into the page with the desired url or content
            </summary>
            <param name="options">add script tag options</param>
            <remarks>
            Shortcut for <c>page.MainFrame.AddScriptTagAsync(options)</c>
            </remarks>
            <returns>Task which resolves to the added tag when the script's onload fires or when the script content was injected into frame</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.AddScriptTagAsync(WebView2.DevTools.Dom.AddTagOptions)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddScriptTagAsync(System.String)">
            <summary>
            Adds a <c><![CDATA[<script>]]></c> tag into the page with the desired url or content
            </summary>
            <param name="url">script url</param>
            <remarks>
            Shortcut for <c>page.MainFrame.AddScriptTagAsync(new AddTagOptions { Url = url })</c>
            </remarks>
            <returns>Task which resolves to the added tag when the script's onload fires or when the script content was injected into frame</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddStyleTagAsync(WebView2.DevTools.Dom.AddTagOptions)">
            <summary>
            Adds a <c><![CDATA[<link rel="stylesheet">]]></c> tag into the page with the desired url or a <c><![CDATA[<link rel="stylesheet">]]></c> tag with the content
            </summary>
            <param name="options">add style tag options</param>
            <remarks>
            Shortcut for <c>page.MainFrame.AddStyleTagAsync(options)</c>
            </remarks>
            <returns>Task which resolves to the added tag when the stylesheet's onload fires or when the CSS content was injected into frame</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AddStyleTagAsync(System.String)">
            <summary>
            Adds a <c><![CDATA[<link rel="stylesheet">]]></c> tag into the page with the desired url or a <c><![CDATA[<link rel="stylesheet">]]></c> tag with the content
            </summary>
            <param name="url">stylesheel url</param>
            <remarks>
            Shortcut for <c>page.MainFrame.AddStyleTagAsync(new AddTagOptions { Url = url })</c>
            </remarks>
            <returns>Task which resolves to the added tag when the stylesheet's onload fires or when the CSS content was injected into frame</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync(System.String,System.Action)">
            <summary>
            Adds a function called <c>name</c> on the page's <c>window</c> object.
            When called, the function executes <paramref name="puppeteerFunction"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves when <paramref name="puppeteerFunction"/> completes.
            </summary>
            <param name="name">Name of the function on the window object</param>
            <param name="puppeteerFunction">Callback function which will be called in Puppeteer's context.</param>
            <remarks>
            If the <paramref name="puppeteerFunction"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync(System.String,System.Action)"/> survive navigations
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``1(System.String,System.Func{``0})">
            <summary>
            Adds a function called <c>name</c> on the page's <c>window</c> object.
            When called, the function executes <paramref name="puppeteerFunction"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="puppeteerFunction"/>.
            </summary>
            <typeparam name="TResult">The result of <paramref name="puppeteerFunction"/></typeparam>
            <param name="name">Name of the function on the window object</param>
            <param name="puppeteerFunction">Callback function which will be called in the DevTools context.</param>
            <remarks>
            If the <paramref name="puppeteerFunction"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``1(System.String,System.Func{``0})"/> survive navigations
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})">
            <summary>
            Adds a function called <c>name</c> on the page's <c>window</c> object.
            When called, the function executes <paramref name="puppeteerFunction"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="puppeteerFunction"/>.
            </summary>
            <typeparam name="T">The parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="TResult">The result of <paramref name="puppeteerFunction"/></typeparam>
            <param name="name">Name of the function on the window object</param>
            <param name="puppeteerFunction">Callback function which will be called in DevTools context.</param>
            <remarks>
            If the <paramref name="puppeteerFunction"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``2(System.String,System.Func{``0,``1})"/> survive navigations
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})">
            <summary>
            Adds a function called <c>name</c> on the page's <c>window</c> object.
            When called, the function executes <paramref name="puppeteerFunction"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="puppeteerFunction"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="T2">The second parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="TResult">The result of <paramref name="puppeteerFunction"/></typeparam>
            <param name="name">Name of the function on the window object</param>
            <param name="puppeteerFunction">Callback function which will be called in Puppeteer's context.</param>
            <remarks>
            If the <paramref name="puppeteerFunction"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``3(System.String,System.Func{``0,``1,``2})"/> survive navigations
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})">
            <summary>
            Adds a function called <c>name</c> on the page's <c>window</c> object.
            When called, the function executes <paramref name="puppeteerFunction"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="puppeteerFunction"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="T2">The second parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="T3">The third parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="TResult">The result of <paramref name="puppeteerFunction"/></typeparam>
            <param name="name">Name of the function on the window object</param>
            <param name="puppeteerFunction">Callback function which will be called in Puppeteer's context.</param>
            <remarks>
            If the <paramref name="puppeteerFunction"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``4(System.String,System.Func{``0,``1,``2,``3})"/> survive navigations
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Adds a function called <c>name</c> on the page's <c>window</c> object.
            When called, the function executes <paramref name="puppeteerFunction"/> in C# and returns a <see cref="T:System.Threading.Tasks.Task"/> which resolves to the return value of <paramref name="puppeteerFunction"/>.
            </summary>
            <typeparam name="T1">The first parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="T2">The second parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="T3">The third parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="T4">The fourth parameter of <paramref name="puppeteerFunction"/></typeparam>
            <typeparam name="TResult">The result of <paramref name="puppeteerFunction"/></typeparam>
            <param name="name">Name of the function on the window object</param>
            <param name="puppeteerFunction">Callback function which will be called in Puppeteer's context.</param>
            <remarks>
            If the <paramref name="puppeteerFunction"/> returns a <see cref="T:System.Threading.Tasks.Task"/>, it will be awaited.
            Functions installed via <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ExposeFunctionAsync``5(System.String,System.Func{``0,``1,``2,``3,``4})"/> survive navigations
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetJavaScriptEnabledAsync(System.Boolean)">
            <summary>
            Enables/Disables Javascript on the page
            </summary>
            <returns>Task.</returns>
            <param name="enabled">Whether or not to enable JavaScript on the page.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetBypassCSPAsync(System.Boolean)">
            <summary>
            Toggles bypassing page's Content-Security-Policy.
            </summary>
            <param name="enabled">sets bypassing of page's Content-Security-Policy.</param>
            <returns></returns>
            <remarks>
            CSP bypassing happens at the moment of CSP initialization rather then evaluation.
            Usually this means that <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetBypassCSPAsync(System.Boolean)"/> should be called before navigating to the domain.
            </remarks>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.GetTitleAsync">
            <summary>
            Returns page's title
            </summary>
            <returns>page's title</returns>
            <see cref="M:WebView2.DevTools.Dom.Frame.GetTitleAsync"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetCacheEnabledAsync(System.Boolean)">
            <summary>
            Toggles ignoring cache for each request based on the enabled state. By default, caching is enabled.
            </summary>
            <param name="enabled">sets the <c>enabled</c> state of the cache</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ClickAsync(System.String,WebView2.DevTools.Dom.Input.ClickOptions)">
            <summary>
            Fetches an element with <paramref name="querySelector"/>, scrolls it into view if needed, and then uses <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Mouse"/> to click in the center of the element.
            </summary>
            <param name="querySelector">A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.</param>
            <param name="options">click options</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="querySelector"/></exception>
            <returns>Task which resolves when the element matching <paramref name="querySelector"/> is successfully clicked</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.HoverAsync(System.String)">
            <summary>
            Fetches an element with <paramref name="querySelector"/>, scrolls it into view if needed, and then uses <see cref="P:WebView2.DevTools.Dom.WebView2DevToolsContext.Mouse"/> to hover over the center of the element.
            </summary>
            <param name="querySelector">A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="querySelector"/></exception>
            <returns>Task which resolves when the element matching <paramref name="querySelector"/> is successfully hovered</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.FocusAsync(System.String)">
            <summary>
            Fetches an element with <paramref name="querySelector"/> and focuses it
            </summary>
            <param name="querySelector">A selector to search for element to focus. If there are multiple elements satisfying the selector, the first will be focused.</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="querySelector"/></exception>
            <returns>Task which resolves when the element matching <paramref name="querySelector"/> is successfully focused</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.TypeAsync(System.String,System.String,WebView2.DevTools.Dom.Input.TypeOptions)">
            <summary>
            Sends a <c>keydown</c>, <c>keypress</c>/<c>input</c>, and <c>keyup</c> event for each character in the text.
            </summary>
            <param name="querySelector">A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.</param>
            <param name="text">A text to type into a focused element</param>
            <param name="options">The options to apply to the type operation.</param>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="querySelector"/></exception>
            <remarks>
            To press a special key, like <c>Control</c> or <c>ArrowDown</c> use <see cref="M:WebView2.DevTools.Dom.Input.Keyboard.PressAsync(System.String,WebView2.DevTools.Dom.Input.PressOptions)"/>
            </remarks>
            <example>
            <code>
            <![CDATA[
            await devToolsContext.TypeAsync("#mytextarea", "Hello"); // Types instantly
            await devToolsContext.TypeAsync("#mytextarea", "World", new TypeOptions { Delay = 100 }); // Types slower, like a user
            ]]>
            </code>
            </example>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionAsync(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <example>
            An example of scraping information from all hyperlinks on the page.
            <code>
            <![CDATA[
            var hyperlinkInfo = await devToolsContext.EvaluateExpressionAsync(@"
                Array
                   .from(document.querySelectorAll('a'))
                   .map(n => ({
                       text: n.innerText,
                       href: n.getAttribute('href'),
                       target: n.getAttribute('target')
                    }))
            ");
            Console.WriteLine(hyperlinkInfo.ToString()); // Displays JSON array of hyperlinkInfo objects
            ]]>
            </code>
            </example>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionAsync``1(System.String)">
            <summary>
            Executes a script in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionAsync``1(System.String,System.Object[])"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionAsync(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionAsync``1(System.String)"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateFunctionAsync``1(System.String,System.Object[])">
            <summary>
            Executes a function in browser context
            </summary>
            <typeparam name="T">The type to deserialize the result to</typeparam>
            <param name="script">Script to be evaluated in browser context</param>
            <param name="args">Arguments to pass to script</param>
            <remarks>
            If the script, returns a Promise, then the method would wait for the promise to resolve and return its value.
            <see cref="T:WebView2.DevTools.Dom.RemoteHandle"/> instances can be passed as arguments
            </remarks>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EvaluateExpressionAsync``1(System.String)"/>
            <returns>Task which resolves to script return value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetUserAgentAsync(System.String)">
            <summary>
            Sets the user agent to be used in this page
            </summary>
            <param name="userAgent">Specific user agent to use in this page</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SelectAsync(System.String,System.String[])">
            <summary>
            Triggers a change and input event once all the provided options have been selected.
            If there's no <![CDATA[<select>]]> element matching selector, the method throws an error.
            </summary>
            <exception cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">If there's no element matching <paramref name="querySelector"/></exception>
            <param name="querySelector">A selector to query page for</param>
            <param name="values">Values of options to select. If the <![CDATA[<select>]]> has the multiple attribute,
            all values are considered, otherwise only the first one is taken into account.</param>
            <returns>Returns an array of option values that have been successfully selected.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.SelectAsync(System.String,System.String[])"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForTimeoutAsync(System.Int32)">
            <summary>
            Waits for a timeout
            </summary>
            <param name="milliseconds">The amount of time to wait.</param>
            <returns>A task that resolves when after the timeout</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForTimeoutAsync(System.Int32)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForFunctionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions,System.Object[])">
            <summary>
            Waits for a function to be evaluated to a truthy value
            </summary>
            <param name="script">Function to be evaluated in browser context</param>
            <param name="options">Optional waiting parameters</param>
            <param name="args">Arguments to pass to <c>script</c></param>
            <returns>A task that resolves when the <c>script</c> returns a truthy value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForFunctionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions,System.Object[])"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForFunctionAsync(System.String,System.Object[])">
            <summary>
            Waits for a function to be evaluated to a truthy value
            </summary>
            <param name="script">Function to be evaluated in browser context</param>
            <param name="args">Arguments to pass to <c>script</c></param>
            <returns>A task that resolves when the <c>script</c> returns a truthy value</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForExpressionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions)">
            <summary>
            Waits for an expression to be evaluated to a truthy value
            </summary>
            <param name="script">Expression to be evaluated in browser context</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task that resolves when the <c>script</c> returns a truthy value</returns>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForExpressionAsync(System.String,WebView2.DevTools.Dom.WaitForFunctionOptions)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a selector to be added to the DOM
            </summary>
            <param name="querySelector">A selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task that resolves when element specified by selector string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync``1(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a selector to be added to the DOM
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="querySelector">A selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task that resolves when element specified by selector string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and selector is not found in DOM.</returns>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a xpath selector to be added to the DOM
            </summary>
            <param name="xpath">A xpath selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task which resolves when element specified by xpath string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and xpath is not found in DOM.</returns>
            <example>
            <code>
            <![CDATA[
            //Add using WebView2.DevTools.Dom
            var devtoolsContext = await coreWebView2.CreateDevToolsContextAsync();
            string currentURL = null;
            devToolsContext
                .WaitForXPathAsync("//img")
                .ContinueWith(_ => Console.WriteLine("First URL with image: " + currentURL));
            foreach (var current in new[] { "https://example.com", "https://google.com", "https://bbc.com" })
            {
                currentURL = current;
                await devToolsContext.GoToAsync(currentURL);
            }
            await devToolsContext.DsiposeAsync();
            ]]>
            </code>
            </example>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForXPathAsync``1(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)">
            <summary>
            Waits for a xpath selector to be added to the DOM
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="xpath">A xpath selector of an element to wait for</param>
            <param name="options">Optional waiting parameters</param>
            <returns>A task which resolves when element specified by xpath string is added to DOM.
            Resolves to `null` if waiting for `hidden: true` and xpath is not found in DOM.</returns>
            <example>
            <code>
            <![CDATA[
            var browser = await Puppeteer.LaunchAsync(new LaunchOptions());
            var page = await browser.NewPageAsync();
            string currentURL = null;
            page
                .WaitForXPathAsync("//img")
                .ContinueWith(_ => Console.WriteLine("First URL with image: " + currentURL));
            foreach (var current in new[] { "https://example.com", "https://google.com", "https://bbc.com" })
            {
                currentURL = current;
                await page.GoToAsync(currentURL);
            }
            await browser.CloseAsync();
            ]]>
            </code>
            </example>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.WaitForSelectorAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.WaitForXPathAsync(System.String,WebView2.DevTools.Dom.WaitForSelectorOptions)"/>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.BringToFrontAsync">
            <summary>
            Brings page to front (activates tab).
            </summary>
            <returns>A task that resolves when the message has been sent to Chromium.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EmulateTimezoneAsync(System.String)">
            <summary>
            Changes the timezone of the page.
            </summary>
            <param name="timezoneId">Timezone to set. See <seealso href="https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1" >ICU’s `metaZones.txt`</seealso>
            for a list of supported timezone IDs. Passing `null` disables timezone emulation.</param>
            <returns>The viewport task.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EmulateCPUThrottlingAsync(System.Nullable{System.Double})">
            <summary>
            Enables CPU throttling to emulate slow CPUs.
            </summary>
            <param name="factor">Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).</param>
            <returns>A task that resolves when the message has been sent to the browser.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.IgnoreCertificateErrorsAsync(System.Boolean)">
            <summary>
            Enable/disable whether all certificate errors should be ignored.
            </summary>
            <param name="ignore">If true, all certificate errors will be ignored.</param>
            <returns>A task that resolves when the message has been sent to the browser.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.CreateHtmlElementAsync``1(System.String)">
            <summary>
            Creates the HTML element specified
            </summary>
            <typeparam name="T">HtmlElementType</typeparam>
            <param name="tagName">
            A string that specifies the type of element to be created.
            The nodeName of the created element is initialized with the
            value of tagName. Don't use qualified names (like "html:a")
            with this method.
            </param>
            <returns>Created element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.CreateHtmlElementAsync``1(System.String,System.String)">
            <summary>
            Creates the HTML element specified
            </summary>
            <typeparam name="T">HtmlElementType</typeparam>
            <param name="tagName">
            A string that specifies the type of element to be created.
            The nodeName of the created element is initialized with the
            value of tagName. Don't use qualified names (like "html:a")
            with this method.
            </param>
            <param name="id">element id</param>
            <returns>Created element</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.AppendChildAsync(WebView2.DevTools.Dom.HtmlElement)">
            <summary>
            Equivilent to calling document.body.appendChild
            </summary>
            <param name="htmlElement">html element</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EmulateAsync(WebView2.DevTools.Dom.Mobile.DeviceDescriptor)">
             <summary>
             Emulates given device metrics and user agent.
             </summary>
             <remarks>
             This method is a shortcut for calling two methods:
             <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetViewportAsync(WebView2.DevTools.Dom.ViewPortOptions)"/>
             <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetUserAgentAsync(System.String)"/>
             To aid emulation, device descriptor can be obtained via the <see cref="M:WebView2.DevTools.Dom.Emulate.Device(WebView2.DevTools.Dom.Mobile.DeviceName)"/>.
             <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.EmulateAsync(WebView2.DevTools.Dom.Mobile.DeviceDescriptor)"/> will resize the page. A lot of websites don't expect phones to change size, so you should emulate before navigating to the page.
             </remarks>
             <example>
            <![CDATA[
             var iPhone = Emulate.Device(DeviceName.IPhone6);
             await devToolsContext.EmulateAsync(iPhone);
             ]]>
             </example>
             <returns>Task.</returns>
             <param name="options">Emulation options.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.GetNavigationHistoryAsync">
            <summary>
            Returns navigation history for the current browser.
            </summary>
            <returns>Task that when awaited gets the navigation history for the current browser.</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.NavigateToHistoryEntryAsync(Microsoft.Web.WebView2.Core.DevToolsProtocolExtension.Page.NavigationEntry)">
            <summary>
            Navigates current browser to the given history entry.
            </summary>
            <param name="historyEntry">Navigation History Entry</param>
            <returns>Task</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.DisposeAsync">
            <summary>
            Releases all resource used by the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/> object
            </summary>
            <remarks>Call <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.DisposeAsync"/> when you are finished using the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/>. The
            <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.DisposeAsync"/> method leaves the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/> in an unusable state. After
            calling <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.DisposeAsync"/>, you must release all references to the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/> so
            the garbage collector can reclaim the memory that the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContext"/> was occupying.</remarks>
            <returns>ValueTask</returns>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetViewportAsync(WebView2.DevTools.Dom.ViewPortOptions)">
            <summary>
            Sets the viewport.
            In the case of multiple pages in a single browser, each page can have its own viewport size.
            <see cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SetViewportAsync(WebView2.DevTools.Dom.ViewPortOptions)"/> will resize the page. A lot of websites don't expect phones to change size, so you should set the viewport before navigating to the page.
            </summary>
            <param name="viewport">Viewport options.</param>
            <returns>A Task that when awaited if returns true then a Reload is required. Otherwise false.</returns>
        </member>
        <member name="T:WebView2.DevTools.Dom.WebView2DevToolsContextException">
            <summary>
            Base exception used to identify any exception thrown by WebView2 DevTools Context
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContextException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException"/> class.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContextException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContextException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsContextException"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException">
            <summary>
            WebView2 Evaluation Failed Exception
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException"/> class.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsEvaluationFailedException"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException">
            <summary>
            Exception thrown when an element selector returns null.
            </summary>
            <seealso cref="M:WebView2.DevTools.Dom.RemoteObjectExtensions.EvaluateFunctionAsync``1(System.Threading.Tasks.Task{WebView2.DevTools.Dom.Element},System.String,System.Object[])"/>
            <seealso cref="M:WebView2.DevTools.Dom.Frame.SelectAsync(System.String,System.String[])"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.ClickAsync(System.String,WebView2.DevTools.Dom.Input.ClickOptions)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.TapAsync(System.String)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.HoverAsync(System.String)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.FocusAsync(System.String)"/>
            <seealso cref="M:WebView2.DevTools.Dom.WebView2DevToolsContext.SelectAsync(System.String,System.String[])"/>
        </member>
        <member name="P:WebView2.DevTools.Dom.WebView2DevToolsSelectorException.Selector">
            <summary>
            Gets the selector.
            </summary>
            <value>The selector.</value>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsSelectorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException"/> class.
            </summary>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsSelectorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsSelectorException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="selector">Selector.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsSelectorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:WebView2.DevTools.Dom.WebView2DevToolsSelectorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WebView2.DevTools.Dom.WebView2DevToolsSelectorException"/> class.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming Context.</param>
        </member>
    </members>
</doc>
